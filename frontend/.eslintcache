[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js":"21","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js":"22","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js":"23","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js":"24","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js":"25","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js":"26","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js":"27","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js":"28","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js":"29","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js":"30","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js":"31","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js":"32","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js":"33","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\StyledBadge.js":"34","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\joinChatRoomModal.js":"35"},{"size":637,"mtime":1613245639965,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":1584,"mtime":1617372644520,"results":"39","hashOfConfig":"37"},{"size":4108,"mtime":1615995430123,"results":"40","hashOfConfig":"37"},{"size":8004,"mtime":1619771273014,"results":"41","hashOfConfig":"37"},{"size":794,"mtime":1617365567971,"results":"42","hashOfConfig":"37"},{"size":2010,"mtime":1619771641808,"results":"43","hashOfConfig":"37"},{"size":207,"mtime":1614944673940,"results":"44","hashOfConfig":"37"},{"size":8704,"mtime":1619777249173,"results":"45","hashOfConfig":"37"},{"size":413,"mtime":1614944673940,"results":"46","hashOfConfig":"37"},{"size":4309,"mtime":1617706933271,"results":"47","hashOfConfig":"37"},{"size":2688,"mtime":1617550691878,"results":"48","hashOfConfig":"37"},{"size":1449,"mtime":1619363898046,"results":"49","hashOfConfig":"37"},{"size":2945,"mtime":1619010470235,"results":"50","hashOfConfig":"37"},{"size":158,"mtime":1613641508407,"results":"51","hashOfConfig":"37"},{"size":775,"mtime":1619090338700,"results":"52","hashOfConfig":"37"},{"size":2474,"mtime":1617372606687,"results":"53","hashOfConfig":"37"},{"size":18113,"mtime":1619776609862,"results":"54","hashOfConfig":"37"},{"size":10408,"mtime":1619605040885,"results":"55","hashOfConfig":"37"},{"size":8807,"mtime":1615122441440,"results":"56","hashOfConfig":"37"},{"size":1755,"mtime":1615453539411,"results":"57","hashOfConfig":"37"},{"size":1333,"mtime":1615995430226,"results":"58","hashOfConfig":"37"},{"size":3083,"mtime":1619776001279,"results":"59","hashOfConfig":"37"},{"size":445,"mtime":1615995430148,"results":"60","hashOfConfig":"37"},{"size":416,"mtime":1619770248585,"results":"61","hashOfConfig":"37"},{"size":1987,"mtime":1615995430120,"results":"62","hashOfConfig":"37"},{"size":3079,"mtime":1619181708479,"results":"63","hashOfConfig":"37"},{"size":5031,"mtime":1619703663012,"results":"64","hashOfConfig":"37"},{"size":1984,"mtime":1617549139821,"results":"65","hashOfConfig":"37"},{"size":1847,"mtime":1617549073368,"results":"66","hashOfConfig":"37"},{"size":2893,"mtime":1616013667415,"results":"67","hashOfConfig":"37"},{"size":4068,"mtime":1619776119207,"results":"68","hashOfConfig":"37"},{"size":9529,"mtime":1619634285475,"results":"69","hashOfConfig":"37"},{"size":751,"mtime":1617115345737,"results":"70","hashOfConfig":"37"},{"size":10809,"mtime":1619776610197,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1r1jcwq",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["149","150"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],["151","152"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",["153","154"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["155"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["156"],"// React\r\nimport { useEffect, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n  markMessagesRead,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\nimport {\r\n  OUTPUT_CHAT_MESSAGE,\r\n  DELETED_CHAT_MESSAGE,\r\n  CREATE_CHAT_ROOM,\r\n  EMIT_CREATED_CHAT_ROOM,\r\n  MEMBERS_JOIN_NEW_CHAT_ROOM,\r\n  TOGGLE_CHAT,\r\n} from '../redux/types';\r\n\r\nimport moment from 'moment';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles(theme => {\r\n  console.log(theme);\r\n  return {\r\n    messageBody: {\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: '#fff',\r\n      paddingTop: 12.5,\r\n      paddingBottom: 12.5,\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n      borderRadius: 100 / 2,\r\n      boxShadow:\r\n        '0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%)',\r\n      display: 'inline-flex',\r\n    },\r\n  };\r\n});\r\n\r\nconst ChatMessageArea = props => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  console.log(classes);\r\n\r\n  const {\r\n    user,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n    getAllUserChatRooms,\r\n    markMessagesRead,\r\n  } = props;\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Dont stack multiple callbacks, just execute once\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$OUTPUT_CHAT_MESSAGE']) {\r\n      socket._callbacks['$OUTPUT_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$EMIT_CREATED_CHAT_ROOM']) {\r\n      socket._callbacks['$EMIT_CREATED_CHAT_ROOM'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$DELETED_CHAT_MESSAGE']) {\r\n      socket._callbacks['$DELETED_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    // if (socket._callbacks !== undefined) {\r\n    //   Object.keys(socket._callbacks).map(callback => {\r\n    //     if (socket._callbacks[callback]) {\r\n    //       socket._callbacks[callback].length = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    // Listen to incoming chatMessages from the backend\r\n    socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // updates the lastChatMessage at the friendsList for both the sender and the receiver of the message.\r\n      emitLastChatMessage(messageFromBackend);\r\n\r\n      // Reorder friendList to show latest conversation on top (SENDER)\r\n      getAllUserChatRooms(`members=${user._id}`);\r\n\r\n      // toggle chat for the message sender\r\n      if (user._id === messageFromBackend.userId) dispatch({ type: TOGGLE_CHAT });\r\n\r\n      // Dispatch from here, so that the redux state is updated for all clients in the room.\r\n      if (messageFromBackend.chatRoomId === props.activeChatRoom._id) {\r\n        console.log('only runs when activeChatRoom === messageFromBackend.chatRoomId');\r\n        emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n\r\n        // Scroll to bottom on send and receive message when the activeChatRoom === room that message is send to\r\n        // chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n        console.log(props.chatMessages.length);\r\n        if (props.chatMessages.length >= 10) {\r\n          scrollIntoLastMessage.current.childNodes[9].scrollIntoView({\r\n            behavior: 'smooth',\r\n          });\r\n        } else if (props.chatMessages.length > 0) {\r\n          scrollIntoLastMessage.current.childNodes[props.chatMessages.length - 1].scrollIntoView({\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n\r\n        // When the received message is in the activeChatRoom, mark the message as read\r\n        let memberId = props.activeChatRoom.members.filter(member => member._id !== user._id);\r\n        markMessagesRead(props.activeChatRoom._id, memberId);\r\n      }\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n\r\n    // When a new chatRoom is created, update the props.chatRooms for all members.\r\n    socket.on(EMIT_CREATED_CHAT_ROOM, createdChatRoom => {\r\n      console.log(createdChatRoom);\r\n\r\n      // if the the current logged in user is a member of the new created chatroom, dispatch add the chatroom to the state. emit the chatroom to the server from all members, so they can all socket.join(theNewChatRoom) serverside\r\n      createdChatRoom.members.forEach(member => {\r\n        if (member._id === user._id) {\r\n          console.log(member);\r\n          dispatch({ type: CREATE_CHAT_ROOM, payload: createdChatRoom });\r\n          socket.emit(MEMBERS_JOIN_NEW_CHAT_ROOM, createdChatRoom);\r\n        }\r\n      });\r\n    });\r\n  }, [\r\n    props.chatMessages.length,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  ]);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  }, [activeChatRoom]);\r\n\r\n  // Gewoon omhoog scrollen werkt perfect\r\n  // Typen zonder omhoog te scrollen werkt perfect\r\n  // Eerst scrollen dan typen, werkt\r\n  // Eerst typen, dan scrollen, dan typen werkt\r\n\r\n  const scrollIntoLastMessage = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // childTen === pos 9, arrays 0 based\r\n    let childTen = scrollIntoLastMessage.current.childNodes[9]?.innerText.split(/\\r?\\n/)[2];\r\n    console.log(scrollIntoLastMessage.current.childNodes);\r\n    // let childTen = scrollIntoLastMessage.current.childNodes[props.chatMessages.length - 1]?.innerText.split(/\\r?\\n/)[2];\r\n    let lastMessage = props.chatMessages[props.chatMessages.length - 1]?.body;\r\n\r\n    console.log(childTen);\r\n    console.log(lastMessage);\r\n    if (props.chatMessages.length > 10) {\r\n      // if the chatMessages array length is divisible by exactly 10, scroll into the new 10th which is the top message\r\n      if (scrollIntoLastMessage.current.childNodes[10] && props.chatMessages.length % 10 === 0) {\r\n        scrollIntoLastMessage.current.childNodes[10].scrollIntoView();\r\n        console.log('if');\r\n        // if the chatMessages array length is not divisible by exactly 10, e.g. 26, substract the array length (20) of the 26, and scroll into the 6\r\n\r\n        // Not divisible by 10 === end of messages\r\n      } else if (\r\n        scrollIntoLastMessage.current.childNodes[10] &&\r\n        props.chatMessages.length % 10 !== 0\r\n      ) {\r\n        console.log('not divisible by 10');\r\n        console.log(props.chatMessages.length);\r\n        let scrollLength =\r\n          props.chatMessages.length - Math.floor(props.chatMessages.length / 10) * 10;\r\n        console.log(scrollLength);\r\n        scrollIntoLastMessage.current.childNodes[scrollLength].scrollIntoView();\r\n      } else {\r\n        console.log('else');\r\n        // chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <List ref={scrollIntoLastMessage}>\r\n        {props.activeChatRoom.chatMessages ? (\r\n          props.chatMessages.map(message => {\r\n            return (\r\n              <ListItem key={message._id}>\r\n                <Grid container>\r\n                  <Grid item xs={12}>\r\n                    {/* username */}\r\n                    <ListItemText\r\n                      style={{ display: message.systemMessage === true && 'none' }}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      secondary={message.username}></ListItemText>\r\n\r\n                    {/* chat message body */}\r\n                    <ListItemText\r\n                      className={message.systemMessage ? 'leftGroup' : ''}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                      <ListItemText\r\n                        className={classes.messageBody}\r\n                        align={props.user._id === message.userId ? 'right' : 'left'}\r\n                        style={{\r\n                          backgroundColor: props.user._id !== message.userId && '#9c27b0',\r\n                        }}>\r\n                        {message.body}\r\n                      </ListItemText>\r\n                    </ListItemText>\r\n                  </Grid>\r\n\r\n                  {/* timestamp */}\r\n                  <Grid item xs={12}>\r\n                    <ListItemText\r\n                      className={message.systemMessage ? 'leftGroup-timestamp' : ''}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      secondary={moment(message.createdAt).fromNow()}></ListItemText>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n            );\r\n          })\r\n        ) : (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            Selecteer een gesprek\r\n          </div>\r\n        )}\r\n\r\n        <div className={'test'} ref={chatEnd} />\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    chatMessages: state.chat.chatMessages,\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n  markMessagesRead,\r\n})(ChatMessageArea);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["157","158","159"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js",[],["160","161"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js",["162"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js",["163"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js",["164","165"],"import { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { leaveChatRoom } from '../redux/actions/chatMessageActions';\r\n\r\n// Types\r\nimport { LEAVE_CHATROOM, LEFT_CHATROOM } from '../redux/types';\r\n\r\nimport JoinChatRoomModal from '../util/joinChatRoomModal';\r\n\r\n// Helper Functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingTop: 20,\r\n    paddingLeft: 20,\r\n  },\r\n  avatar: {\r\n    width: 60,\r\n    height: 60,\r\n    border: 'none',\r\n  },\r\n  members: {\r\n    fontWeight: 'bold',\r\n    marginLeft: 20,\r\n    marginRight: 10,\r\n  },\r\n  text: {\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ChatHeader = props => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const { user, activeChatRoom, leaveChatRoom, socket } = props;\r\n\r\n  const handleClick = event => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handeLeaveChatRoom = roomId => {\r\n    console.log('running handleLeaveChatRoom');\r\n    console.log(roomId);\r\n\r\n    console.log(activeChatRoom);\r\n\r\n    if (window.confirm('Weet u zeker dat u de groep wilt verlaten?')) {\r\n      // leaveChatRoom(socket, roomId, user.username);\r\n      leaveChatRoom(socket, roomId, user);\r\n      handleClose();\r\n      // socket.emit(LEAVE_CHATROOM, roomId, user);\r\n    } else {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const contact = activeChatRoom.members?.filter(member =>\r\n    user._id !== member._id ? member : null,\r\n  );\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {/* 2 chat room members */}\r\n      {contact && activeChatRoom.members.length === 2 && !activeChatRoom.name && (\r\n        <>\r\n          <Avatar\r\n            className={classes.avatar}\r\n            alt={contact && contact[0]?.username.toUpperCase()}\r\n            src={contact && contact[0]?.avatar}\r\n          />\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n        </>\r\n      )}\r\n\r\n      {/* More than 2 chat room members */}\r\n      {contact && activeChatRoom.members.length >= 1 && activeChatRoom.name && (\r\n        <>\r\n          <AvatarGroup max={5}>\r\n            {activeChatRoom.members.map(member => {\r\n              return (\r\n                <Avatar\r\n                  key={member._id}\r\n                  className={classes.avatar}\r\n                  alt={member.username.toUpperCase()}\r\n                  src={member.avatar}></Avatar>\r\n              );\r\n            })}\r\n          </AvatarGroup>\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n\r\n          {/* Leave Group Button */}\r\n          <div style={{ marginLeft: 'auto', marginRight: 20, zIndex: 1 }}>\r\n            <IconButton>\r\n              <SettingsIcon onClick={handleClick} style={{ color: 'white' }} />\r\n              <Menu\r\n                id='simple-menu'\r\n                style={{ zIndex: 2 }}\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    handeLeaveChatRoom(activeChatRoom._id);\r\n                  }}>\r\n                  Groep Verlaten\r\n                </MenuItem>\r\n                <JoinChatRoomModal />\r\n              </Menu>\r\n            </IconButton>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    socket: state.socket.socket,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { leaveChatRoom })(ChatHeader);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js",["166"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js",["167"],"import { useEffect, useState } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux chatMessage actions\r\nimport { createChatRoom } from '../redux/actions/chatMessageActions';\r\n\r\n// Helper\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { CLEAR_ERRORS, SET_ERRORS } from '../redux/types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n    border: 'none',\r\n    outline: 'none',\r\n  },\r\n  cardHeader: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  list: {\r\n    width: 300,\r\n    height: '50vh',\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter(value => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter(value => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nconst CreateGroupModal = props => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [checked, setChecked] = useState([]);\r\n  const [left, setLeft] = useState([]);\r\n  const [right, setRight] = useState([]);\r\n  const [groupName, setGroupName] = useState('');\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setRight([]);\r\n  };\r\n\r\n  const handleToggle = value => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = items => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = items => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  // Add users to left item list ComponentDidMount\r\n  useEffect(() => {\r\n    console.log('Add users left');\r\n    let users = [];\r\n    props.users.map(user => {\r\n      return props.user._id !== user._id && users.push(user);\r\n    });\r\n    setLeft(users);\r\n    console.log(users);\r\n  }, [open]);\r\n\r\n  //   Enable the submit button when 2 or more users are selected, + add current user\r\n  const handleSubmit = (e, selectedUsers) => {\r\n    e.preventDefault();\r\n    console.log(groupName);\r\n    selectedUsers = [...selectedUsers, props.user];\r\n\r\n    if (selectedUsers.length <= 2)\r\n      return dispatch({ type: SET_ERRORS, payload: 'Groep heeft te weinig leden' });\r\n\r\n    selectedUsers.forEach(user => {\r\n      console.log(user._id);\r\n    });\r\n\r\n    props.createChatRoom(\r\n      props.socket,\r\n      groupName,\r\n      props.user._id,\r\n      selectedUsers.map(user => user._id),\r\n    );\r\n\r\n    // When ready\r\n    setGroupName('');\r\n  };\r\n\r\n  const customList = (title, items) => {\r\n    return (\r\n      <Card>\r\n        <CardHeader\r\n          className={classes.cardHeader}\r\n          avatar={\r\n            <Checkbox\r\n              onClick={handleToggleAll(items)}\r\n              checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n              indeterminate={\r\n                numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\r\n              }\r\n              disabled={items.length === 0}\r\n              inputProps={{ 'aria-label': 'all items selected' }}\r\n            />\r\n          }\r\n          title={title}\r\n          subheader={`${numberOfChecked(items)}/${items.length} geselecteerd`}\r\n        />\r\n        <Divider />\r\n        <List className={classes.list} dense component='div' role='list'>\r\n          {items.map(value => {\r\n            const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n            return (\r\n              <ListItem key={value._id} role='listitem' button onClick={handleToggle(value)}>\r\n                <ListItemIcon>\r\n                  <Avatar src={value.avatar}></Avatar>\r\n                </ListItemIcon>\r\n                <ListItemText id={labelId} primary={firstCharUpperCase(value.username)} />\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': labelId }}\r\n                />\r\n              </ListItem>\r\n            );\r\n          })}\r\n          <ListItem />\r\n        </List>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const modalBody = (\r\n    <>\r\n      <Grid container spacing={2} justify='center' alignItems='center' className={classes.root}>\r\n        <Grid item>{customList('Selecteer min 2 & max 9 leden', left)}</Grid>\r\n        <Grid item>\r\n          <Grid container direction='column' alignItems='center'>\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              className={classes.button}\r\n              onClick={handleCheckedRight}\r\n              disabled={leftChecked.length === 0}\r\n              aria-label='move selected right'>\r\n              &gt;\r\n            </Button>\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              className={classes.button}\r\n              onClick={handleCheckedLeft}\r\n              disabled={rightChecked.length === 0}\r\n              aria-label='move selected left'>\r\n              &lt;\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>{customList('Geselecteerd', right)}</Grid>\r\n      </Grid>\r\n\r\n      {/* Form */}\r\n      <form\r\n        onSubmit={e => {\r\n          console.log('submit create group');\r\n          handleSubmit(e, right);\r\n        }}\r\n        className={classes.input}\r\n        noValidate\r\n        autoComplete='off'>\r\n        <TextField\r\n          value={groupName}\r\n          onChange={e => {\r\n            dispatch({ type: CLEAR_ERRORS });\r\n            setGroupName(e.target.value);\r\n          }}\r\n          id='standard-basic'\r\n          label='Groepsnaam'\r\n          error={props.errors && props.errors.length > 0 ? true : false}\r\n          helperText={\r\n            props.errors && props.errors.length > 0 ? props.errors[props.errors.length - 1] : ''\r\n          }\r\n        />\r\n        <Button\r\n          disabled={right.length > 1 ? false : true}\r\n          onClick={e => {\r\n            console.log('submit create group');\r\n            handleSubmit(e, right);\r\n          }}\r\n          variant='contained'\r\n          color='primary'>\r\n          Groep Aanmaken\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid item xs={4}>\r\n        <ListItem\r\n          button\r\n          onClick={e => {\r\n            console.log('createNewGroup Modal');\r\n            handleOpen();\r\n            // toggle open modal with transfer list\r\n            // Select users inside the transfer list (max?)\r\n            // createGroup.then(close modal)\r\n            // Render new group (for all members?)\r\n          }}>\r\n          <ListItemText style={{ textAlign: 'center' }}>\r\n            <Tooltip title='Nieuwe Groep Maken' placement='top-start' arrow interactive>\r\n              {/* Add Group */}\r\n              {props.theme === 'dark' ? <GroupAddIcon /> : <GroupAddIcon color='primary' />}\r\n            </Tooltip>\r\n          </ListItemText>\r\n        </ListItem>\r\n      </Grid>\r\n\r\n      <div>\r\n        <Modal\r\n          className={classes.modal}\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n          aria-describedby='simple-modal-description'>\r\n          {modalBody}\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    user: state.user.user,\r\n    users: state.user.users,\r\n    errors: state.user.errors,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { createChatRoom })(CreateGroupModal);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\StyledBadge.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\joinChatRoomModal.js",["168","169","170","171","172","173","174","175"],"import { useEffect, useState } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux chatMessage actions\r\nimport { updateChatRoom } from '../redux/actions/chatMessageActions';\r\n\r\n// Types\r\nimport { CLEAR_ERRORS, SET_ERRORS, ADDED_USERS_TO_CHATROOM } from '../redux/types';\r\n\r\n// Helper\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n    border: 'none',\r\n    outline: 'none',\r\n  },\r\n  cardHeader: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  list: {\r\n    width: 300,\r\n    height: '50vh',\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter(value => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter(value => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nconst JoinChatRoomModal = props => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [checked, setChecked] = useState([]);\r\n  const [left, setLeft] = useState([]);\r\n  const [right, setRight] = useState([]);\r\n  const [groupName, setGroupName] = useState('');\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const { socket } = props;\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setRight([]);\r\n  };\r\n\r\n  const handleToggle = value => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = items => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = items => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  // Add users to left item list ComponentDidMount\r\n  useEffect(() => {\r\n    console.log('Add users left');\r\n    let users = [...props.users];\r\n    let indexes = [];\r\n\r\n    console.log(users);\r\n    console.log(props.users);\r\n    console.log(props.activeChatRoom.members);\r\n\r\n    // If a user is already member of the chatroom, splice the user from the selectable userlist\r\n    for (let i = 0; i < users.length; i++) {\r\n      //   console.log(users[i]._id);\r\n      for (let j = 0; j < props.activeChatRoom.members.length; j++) {\r\n        if (users[i]._id === props.activeChatRoom.members[j]._id) {\r\n          // console.log(users[i]);\r\n          console.log(props.activeChatRoom.members[j]);\r\n\r\n          console.log(users.indexOf(users[i]));\r\n          indexes.push(users.indexOf(users[i]));\r\n\r\n          // splice at the index where the id's match\r\n          // console.log(users.splice(users.indexOf(users[i]), 1));\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(indexes);\r\n\r\n    // Remove indexes\r\n    function spliceUserIndexes(arr) {\r\n      let remove = indexes;\r\n      for (let i = remove.length - 1; i >= 0; i--) {\r\n        arr.splice(remove[i], 1);\r\n      }\r\n    }\r\n\r\n    spliceUserIndexes(users);\r\n    setLeft(users);\r\n    console.log(users);\r\n  }, [open]);\r\n\r\n  //   Enable the submit button when 2 or more users are selected, + add current user\r\n  const handleSubmit = (e, selectedUsers) => {\r\n    e.preventDefault();\r\n    // console.log(groupName);\r\n    selectedUsers = [...props.activeChatRoom.members, ...selectedUsers];\r\n\r\n    console.log(selectedUsers);\r\n\r\n    if (selectedUsers.length > 10) {\r\n      alert('Groep heeft teveel leden (max 10)');\r\n      return dispatch({ type: SET_ERRORS, payload: 'Groep heeft teveel leden (max 10)' });\r\n    }\r\n\r\n    // selectedUsers.forEach(user => {\r\n    //   console.log(user._id);\r\n    // });\r\n\r\n    props.updateChatRoom(\r\n      socket,\r\n      props.activeChatRoom._id,\r\n      selectedUsers.map(user => user._id),\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket._callbacks !== undefined && socket._callbacks['$ADDED_USERS_TO_CHATROOM']) {\r\n      socket._callbacks['$ADDED_USERS_TO_CHATROOM'].length = 0;\r\n    }\r\n\r\n    socket.on(ADDED_USERS_TO_CHATROOM, data => {\r\n      console.log('ADDED_USERS_TO_CHATROOM');\r\n      console.log(data);\r\n      handleClose();\r\n      dispatch({ type: ADDED_USERS_TO_CHATROOM, payload: { data } });\r\n    });\r\n  }, [props.chatRooms]);\r\n\r\n  const customList = (title, items) => {\r\n    return (\r\n      <Card>\r\n        <CardHeader\r\n          className={classes.cardHeader}\r\n          avatar={\r\n            <Checkbox\r\n              onClick={handleToggleAll(items)}\r\n              checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n              indeterminate={\r\n                numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\r\n              }\r\n              disabled={items.length === 0}\r\n              inputProps={{ 'aria-label': 'all items selected' }}\r\n            />\r\n          }\r\n          title={title}\r\n          subheader={`${numberOfChecked(items)}/${items.length} geselecteerd`}\r\n        />\r\n        <Divider />\r\n        <List className={classes.list} dense component='div' role='list'>\r\n          {items.map(value => {\r\n            const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n            return (\r\n              <ListItem key={value._id} role='listitem' button onClick={handleToggle(value)}>\r\n                <ListItemIcon>\r\n                  <Avatar src={value.avatar}></Avatar>\r\n                </ListItemIcon>\r\n                <ListItemText id={labelId} primary={firstCharUpperCase(value.username)} />\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': labelId }}\r\n                />\r\n              </ListItem>\r\n            );\r\n          })}\r\n          <ListItem />\r\n        </List>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const modalBody = (\r\n    <>\r\n      <Grid container spacing={2} justify='center' alignItems='center' className={classes.root}>\r\n        <Grid item>\r\n          {customList(`Groep heeft ${props.activeChatRoom.members.length} leden (max 10)`, left)}\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container direction='column' alignItems='center'>\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              className={classes.button}\r\n              onClick={handleCheckedRight}\r\n              disabled={leftChecked.length === 0}\r\n              aria-label='move selected right'>\r\n              &gt;\r\n            </Button>\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              className={classes.button}\r\n              onClick={handleCheckedLeft}\r\n              disabled={rightChecked.length === 0}\r\n              aria-label='move selected left'>\r\n              &lt;\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          {customList(\r\n            `selecteer maximaal ${10 - props.activeChatRoom.members.length} leden`,\r\n            right,\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Form */}\r\n      <form\r\n        onSubmit={e => {\r\n          console.log('submit add users to group');\r\n          handleSubmit(e, right);\r\n        }}\r\n        className={classes.input}\r\n        noValidate\r\n        autoComplete='off'>\r\n        {/* <TextField\r\n          value={groupName}\r\n          onChange={e => {\r\n            dispatch({ type: CLEAR_ERRORS });\r\n            setGroupName(e.target.value);\r\n          }}\r\n          id='standard-basic'\r\n          label='Groepsnaam'\r\n          error={props.errors && props.errors.length > 0 ? true : false}\r\n          helperText={\r\n            props.errors && props.errors.length > 0 ? props.errors[props.errors.length - 1] : ''\r\n          }\r\n        /> */}\r\n        <Button\r\n          disabled={right.length >= 1 ? false : true}\r\n          onClick={e => {\r\n            console.log('submit add users to group');\r\n            handleSubmit(e, right);\r\n          }}\r\n          variant='contained'\r\n          color='primary'>\r\n          toevoegen\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <MenuItem\r\n        onClick={handleOpen}\r\n        disabled={props.activeChatRoom.moderator !== props.user._id ? true : false}>\r\n        Gebruiker(s) toevoegen\r\n      </MenuItem>\r\n\r\n      <div>\r\n        <Modal\r\n          className={classes.modal}\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n          aria-describedby='simple-modal-description'>\r\n          {modalBody}\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    user: state.user.user,\r\n    users: state.user.users,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    errors: state.user.errors,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateChatRoom })(JoinChatRoomModal);\r\n",{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"176","replacedBy":"180"},{"ruleId":"178","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":205,"column":29,"nodeType":"184","messageId":"185","endLine":205,"endColumn":31},{"ruleId":"182","severity":1,"message":"183","line":233,"column":29,"nodeType":"184","messageId":"185","endLine":233,"endColumn":31},{"ruleId":"186","severity":1,"message":"187","line":65,"column":6,"nodeType":"188","endLine":65,"endColumn":8,"suggestions":"189"},{"ruleId":"186","severity":1,"message":"190","line":153,"column":6,"nodeType":"188","endLine":160,"endColumn":4,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":21,"column":8,"nodeType":"194","messageId":"195","endLine":21,"endColumn":23},{"ruleId":"186","severity":1,"message":"196","line":99,"column":6,"nodeType":"188","endLine":104,"endColumn":4,"suggestions":"197"},{"ruleId":"182","severity":1,"message":"198","line":158,"column":48,"nodeType":"184","messageId":"199","endLine":158,"endColumn":50},{"ruleId":"176","replacedBy":"200"},{"ruleId":"178","replacedBy":"201"},{"ruleId":"186","severity":1,"message":"202","line":59,"column":6,"nodeType":"188","endLine":59,"endColumn":55,"suggestions":"203"},{"ruleId":"192","severity":1,"message":"204","line":3,"column":10,"nodeType":"194","messageId":"195","endLine":3,"endColumn":23},{"ruleId":"192","severity":1,"message":"205","line":19,"column":10,"nodeType":"194","messageId":"195","endLine":19,"endColumn":24},{"ruleId":"192","severity":1,"message":"206","line":19,"column":26,"nodeType":"194","messageId":"195","endLine":19,"endColumn":39},{"ruleId":"186","severity":1,"message":"207","line":53,"column":6,"nodeType":"188","endLine":53,"endColumn":23,"suggestions":"208"},{"ruleId":"186","severity":1,"message":"209","line":140,"column":6,"nodeType":"188","endLine":140,"endColumn":12,"suggestions":"210"},{"ruleId":"192","severity":1,"message":"211","line":10,"column":10,"nodeType":"194","messageId":"195","endLine":10,"endColumn":22},{"ruleId":"192","severity":1,"message":"212","line":10,"column":36,"nodeType":"194","messageId":"195","endLine":10,"endColumn":59},{"ruleId":"192","severity":1,"message":"213","line":19,"column":8,"nodeType":"194","messageId":"195","endLine":19,"endColumn":15},{"ruleId":"192","severity":1,"message":"214","line":25,"column":8,"nodeType":"194","messageId":"195","endLine":25,"endColumn":20},{"ruleId":"192","severity":1,"message":"215","line":31,"column":8,"nodeType":"194","messageId":"195","endLine":31,"endColumn":17},{"ruleId":"192","severity":1,"message":"216","line":85,"column":10,"nodeType":"194","messageId":"195","endLine":85,"endColumn":19},{"ruleId":"192","severity":1,"message":"217","line":85,"column":21,"nodeType":"194","messageId":"195","endLine":85,"endColumn":33},{"ruleId":"186","severity":1,"message":"218","line":176,"column":6,"nodeType":"188","endLine":176,"endColumn":12,"suggestions":"219"},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],["220"],["221"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["222"],"React Hook useEffect has missing dependencies: 'dispatch', 'getAllUserChatRooms', 'markMessagesRead', 'props.activeChatRoom._id', 'props.activeChatRoom.members', and 'user._id'. Either include them or remove the dependency array.",["223"],"no-unused-vars","'ChatFriendsList' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["224"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["220"],["221"],"React Hook useEffect has a missing dependency: 'skip'. Either include it or remove the dependency array.",["225"],"'hasDuplicates' is defined but never used.","'LEAVE_CHATROOM' is defined but never used.","'LEFT_CHATROOM' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'socket'. Either include them or remove the dependency array.",["226"],"React Hook useEffect has missing dependencies: 'props.user._id' and 'props.users'. Either include them or remove the dependency array.",["227"],"'CLEAR_ERRORS' is defined but never used.","'ADDED_USERS_TO_CHATROOM' is defined but never used.","'Tooltip' is defined but never used.","'GroupAddIcon' is defined but never used.","'TextField' is defined but never used.","'groupName' is assigned a value but never used.","'setGroupName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.activeChatRoom.members' and 'props.users'. Either include them or remove the dependency array.",["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [props]",{"range":"243","text":"244"},"Update the dependencies array to be: [props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",{"range":"245","text":"246"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"247","text":"248"},"Update the dependencies array to be: [props.activeChatRoom, props.chatMessages.length, skip]",{"range":"249","text":"250"},"Update the dependencies array to be: [dispatch, props.chatRooms, socket]",{"range":"251","text":"252"},"Update the dependencies array to be: [open, props.user._id, props.users]",{"range":"253","text":"254"},"Update the dependencies array to be: [open, props.activeChatRoom.members, props.users]",{"range":"255","text":"256"},[2389,2391],"[props]",[5547,5745],"[props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",[2962,3108],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",[1584,1633],"[props.activeChatRoom, props.chatMessages.length, skip]",[1643,1660],"[dispatch, props.chatRooms, socket]",[3832,3838],"[open, props.user._id, props.users]",[4926,4932],"[open, props.activeChatRoom.members, props.users]"]