[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19"},{"size":637,"mtime":1613245639965,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":741,"mtime":1613673358934,"results":"23","hashOfConfig":"21"},{"size":3863,"mtime":1613728172516,"results":"24","hashOfConfig":"21"},{"size":2084,"mtime":1613660403370,"results":"25","hashOfConfig":"21"},{"size":747,"mtime":1613674642268,"results":"26","hashOfConfig":"21"},{"size":614,"mtime":1613644326238,"results":"27","hashOfConfig":"21"},{"size":207,"mtime":1613462400030,"results":"28","hashOfConfig":"21"},{"size":1449,"mtime":1613503428548,"results":"29","hashOfConfig":"21"},{"size":413,"mtime":1613674734759,"results":"30","hashOfConfig":"21"},{"size":4316,"mtime":1613578011613,"results":"31","hashOfConfig":"21"},{"size":696,"mtime":1613642144173,"results":"32","hashOfConfig":"21"},{"size":643,"mtime":1613641258889,"results":"33","hashOfConfig":"21"},{"size":1307,"mtime":1613644584906,"results":"34","hashOfConfig":"21"},{"size":158,"mtime":1613641508407,"results":"35","hashOfConfig":"21"},{"size":701,"mtime":1613647450576,"results":"36","hashOfConfig":"21"},{"size":3191,"mtime":1613728079942,"results":"37","hashOfConfig":"21"},{"size":1217,"mtime":1613658220737,"results":"38","hashOfConfig":"21"},{"size":5558,"mtime":1613663890374,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1r1jcwq",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["82","83"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",["84"],"import './css/App.css';\n\n// React Router DOM\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Components\nimport Login from './Components/Login';\nimport ChatPage from './Components/ChatPage';\nimport Chat from './Components/Chat';\n\nimport AuthRoute from './util/AuthRoute';\nimport Spinner from './util/Spinner';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='app'>\n        <Switch>\n          <AuthRoute exact path='/' component={ChatPage} />\n          <AuthRoute exact path='/chat' component={ChatPage} />\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/spin' component={Spinner} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",["85","86"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",["87"],"// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Actions\r\nimport { getCurrentLoggedInUser } from '../redux/actions/authActions';\r\n\r\n// React Router DOM\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n// Components\r\nimport Spinner from './Spinner';\r\n\r\nimport { useEffect } from 'react';\r\n\r\n// When we specify an Authroute:\r\n//  - getCurrentLoggedInUser checks if the user is logged in. (componentDidMount)\r\n//  - When the user is loading, show a spinner\r\n//  - When props.authenticated._id === true, it means the user is logged in. Render the passed in component (props.component)\r\n//  - When props.authenticated._id === false, it means the user is not logged in. redirect to /login\r\n\r\nconst AuthRoute = props => {\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    props.getCurrentLoggedInUser();\r\n  }, []);\r\n\r\n  // Render\r\n  return (\r\n    <Route\r\n      render={() =>\r\n        props.loading ? (\r\n          <Spinner />\r\n        ) : props.authenticated._id ? (\r\n          <props.component />\r\n        ) : (\r\n          <Redirect to='/login' />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    authenticated: state.user.user,\r\n    loading: state.user.loading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getCurrentLoggedInUser })(AuthRoute);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",["88","89","90","91"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["92","93","94"],"// React\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  getAllChatMessages,\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\n// Receive from server types:\r\nimport { OUTPUT_CHAT_MESSAGE, DELETED_CHAT_MESSAGE } from '../redux/types';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport noImg from '../images/no-img.png';\r\n\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#33ab9f',\r\n      main: '#009688',\r\n      dark: '#00695f',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n  },\r\n});\r\n\r\nconst ChatMessageArea = props => {\r\n  // Props\r\n  console.log(props);\r\n  console.log(theme);\r\n\r\n  const { primary } = theme.palette;\r\n\r\n  // Local State\r\n  const [chatMessage, setChatMessage] = useState('');\r\n\r\n  // ComponentDidMount: fetch all chats messages once\r\n  useEffect(() => {\r\n    props.getAllChatMessages();\r\n  }, []);\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Listen to incoming chatMessages from the backend\r\n    props.socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // Dispatch from here, so that the redux state is updated for all clients.\r\n      props.emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    props.socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      props.emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n  }, []);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  });\r\n\r\n  //   Local funcions\r\n  const handleChange = e => {\r\n    setChatMessage(e.target.value);\r\n  };\r\n\r\n  const submitChatMessage = e => {\r\n    e.preventDefault();\r\n\r\n    // Mock user data from redux for example\r\n\r\n    // Create chat message action\r\n    props.createChatMessage({\r\n      body: chatMessage,\r\n    });\r\n\r\n    setChatMessage('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List className={props.classes.messageArea}>\r\n        {props.data.chatMessages ? (\r\n          props.data.chatMessages.map(message => (\r\n            <ListItem key={message._id}>\r\n              <Grid container>\r\n                <Grid item xs={12}></Grid>\r\n                <Grid item xs={12}>\r\n                  {/* username */}\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={message.username}></ListItemText>\r\n\r\n                  {/* chat message body */}\r\n                  <ListItemText align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                    <Chip\r\n                      avatar={<Avatar alt={props.user.username} src={noImg} />}\r\n                      label={message.body}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      color='primary'\r\n                    />\r\n                  </ListItemText>\r\n                </Grid>\r\n\r\n                {/* timestamp */}\r\n                <Grid item xs={12}>\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary='09:30'></ListItemText>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <div>No Messages</div>\r\n        )}\r\n\r\n        <div ref={chatEnd} />\r\n      </List>\r\n      <Divider />\r\n      <Grid container style={{ padding: '20px' }}>\r\n        <Grid item xs={11}>\r\n          <form onSubmit={submitChatMessage}>\r\n            <TextField\r\n              id='outlined-basic-email'\r\n              label='Type Something'\r\n              fullWidth\r\n              autoFocus={true}\r\n              value={chatMessage}\r\n              onChange={handleChange}\r\n            />\r\n          </form>\r\n        </Grid>\r\n        <Grid xs={1} align='right'>\r\n          <Fab color='primary' aria-label='add'>\r\n            <SendIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    data: state.data,\r\n    user: state.user.user,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllChatMessages,\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n})(ChatMessageArea);\r\n",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":9,"column":8,"nodeType":"101","messageId":"102","endLine":9,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":31,"column":6,"nodeType":"105","endLine":31,"endColumn":8,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"104","line":54,"column":6,"nodeType":"105","endLine":54,"endColumn":8,"suggestions":"107"},{"ruleId":"103","severity":1,"message":"104","line":25,"column":6,"nodeType":"105","endLine":25,"endColumn":8,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"109","line":17,"column":10,"nodeType":"101","messageId":"102","endLine":17,"endColumn":29},{"ruleId":"99","severity":1,"message":"110","line":17,"column":31,"nodeType":"101","messageId":"102","endLine":17,"endColumn":51},{"ruleId":"99","severity":1,"message":"111","line":31,"column":8,"nodeType":"101","messageId":"102","endLine":31,"endColumn":11},{"ruleId":"99","severity":1,"message":"112","line":32,"column":8,"nodeType":"101","messageId":"102","endLine":32,"endColumn":16},{"ruleId":"99","severity":1,"message":"113","line":57,"column":11,"nodeType":"101","messageId":"102","endLine":57,"endColumn":18},{"ruleId":"103","severity":1,"message":"104","line":65,"column":6,"nodeType":"105","endLine":65,"endColumn":8,"suggestions":"114"},{"ruleId":"103","severity":1,"message":"104","line":84,"column":6,"nodeType":"105","endLine":84,"endColumn":8,"suggestions":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'Chat' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["118"],["119"],["120"],"'OUTPUT_CHAT_MESSAGE' is defined but never used.","'DELETED_CHAT_MESSAGE' is defined but never used.","'Fab' is defined but never used.","'SendIcon' is defined but never used.","'primary' is assigned a value but never used.",["121"],["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"123","fix":"125"},{"desc":"123","fix":"126"},{"desc":"123","fix":"127"},{"desc":"123","fix":"128"},"Update the dependencies array to be: [props]",{"range":"129","text":"130"},{"range":"131","text":"130"},{"range":"132","text":"130"},{"range":"133","text":"130"},{"range":"134","text":"130"},[751,753],"[props]",[1710,1712],[816,818],[1710,1712],[2573,2575]]