[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js":"21","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js":"22","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js":"23","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js":"24","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js":"25","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js":"26","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js":"27","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js":"28","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js":"29","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js":"30","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js":"31","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js":"32","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js":"33","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\StyledBadge.js":"34"},{"size":637,"mtime":1613245639965,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":1584,"mtime":1617372644520,"results":"38","hashOfConfig":"36"},{"size":4108,"mtime":1615995430123,"results":"39","hashOfConfig":"36"},{"size":5710,"mtime":1617551758360,"results":"40","hashOfConfig":"36"},{"size":794,"mtime":1617365567971,"results":"41","hashOfConfig":"36"},{"size":1784,"mtime":1617370128832,"results":"42","hashOfConfig":"36"},{"size":207,"mtime":1614944673940,"results":"43","hashOfConfig":"36"},{"size":5929,"mtime":1617376244992,"results":"44","hashOfConfig":"36"},{"size":413,"mtime":1614944673940,"results":"45","hashOfConfig":"36"},{"size":4309,"mtime":1617553177494,"results":"46","hashOfConfig":"36"},{"size":2688,"mtime":1617550691878,"results":"47","hashOfConfig":"36"},{"size":1087,"mtime":1614944673937,"results":"48","hashOfConfig":"36"},{"size":2924,"mtime":1615995430224,"results":"49","hashOfConfig":"36"},{"size":158,"mtime":1613641508407,"results":"50","hashOfConfig":"36"},{"size":775,"mtime":1617553577124,"results":"51","hashOfConfig":"36"},{"size":2474,"mtime":1617372606687,"results":"52","hashOfConfig":"36"},{"size":16499,"mtime":1617375685418,"results":"53","hashOfConfig":"36"},{"size":9314,"mtime":1617375157482,"results":"54","hashOfConfig":"36"},{"size":8807,"mtime":1615122441440,"results":"55","hashOfConfig":"36"},{"size":1755,"mtime":1615453539411,"results":"56","hashOfConfig":"36"},{"size":1333,"mtime":1615995430226,"results":"57","hashOfConfig":"36"},{"size":3086,"mtime":1617549632435,"results":"58","hashOfConfig":"36"},{"size":445,"mtime":1615995430148,"results":"59","hashOfConfig":"36"},{"size":100,"mtime":1615453539430,"results":"60","hashOfConfig":"36"},{"size":1987,"mtime":1615995430120,"results":"61","hashOfConfig":"36"},{"size":2527,"mtime":1616586465216,"results":"62","hashOfConfig":"36"},{"size":3030,"mtime":1617372681201,"results":"63","hashOfConfig":"36"},{"size":1984,"mtime":1617549139821,"results":"64","hashOfConfig":"36"},{"size":1847,"mtime":1617549073368,"results":"65","hashOfConfig":"36"},{"size":2893,"mtime":1616013667415,"results":"66","hashOfConfig":"36"},{"size":2788,"mtime":1617376620849,"results":"67","hashOfConfig":"36"},{"size":9506,"mtime":1617553776587,"results":"68","hashOfConfig":"36"},{"size":751,"mtime":1617115345737,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1r1jcwq",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["144","145"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],["146","147"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["148"],"import { useEffect } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux actions\r\nimport { getAllUsers } from '../redux/actions/userActions';\r\nimport {\r\n  getSingleChatRoom,\r\n  createChatRoom,\r\n  markMessagesRead,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\n// Types\r\nimport { TOGGLE_CHAT, TOGGLE_CONTACTS, SET_NO_ACTIVE_CHATROOM } from '../redux/types';\r\n\r\n// Components\r\nimport { StyledBadge } from '../util/StyledBadge';\r\n\r\n// Helper functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport GroupChat from './GroupChat';\r\nimport CreateGroupModal from '../util/CreateGroupModal';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  chatButtons: {\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 1000,\r\n    backgroundColor: theme.palette.background.paper,\r\n    justify: 'space-between',\r\n  },\r\n}));\r\n\r\nconst ChatFriendsList = props => {\r\n  // authroute calls getsAllUserRooms, which queries the chatrooms with {req.user._id} where the current logged in user is a member of.\r\n  // We add the chatrooms to the redux state, only chatrooms that have messages are rendered to CHATS\r\n  // we render the chatrooms, with the name of the member that is not the currentUser, sorted by the last created or received message on top.\r\n  // onCLick => getChatMessages from that room with the room._id + we socket.join('clickedRoom') server side, and leave all other rooms. (SERVER SIDE: NO LONGER TRUE)\r\n  // in socketManager we query the chatRooms where the user is a member, we loop through the rooms and socket.join them all.\r\n\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    props.getAllUsers();\r\n  }, []);\r\n\r\n  const { toggleFriendList } = props;\r\n\r\n  // check if there is a chatroom with the clicked on contact. create one if there is not.\r\n  const checkIfContactHasChatRoom = clickedContact => {\r\n    let chatroom;\r\n    props.chatRooms.forEach(room => {\r\n      room.members.forEach(member => {\r\n        if (clickedContact._id === member._id && room.members.length <= 2) {\r\n          chatroom = room;\r\n        }\r\n      });\r\n    });\r\n    console.log(chatroom);\r\n\r\n    // If there is a chatroom, set it as the activeChatRoom\r\n    if (chatroom) {\r\n      props.getSingleChatRoom(chatroom._id);\r\n\r\n      // If the chatroom contains chatMessages, render 'chats'. If the chatroom does not contain chatMessages, stay in 'contacts'.\r\n      // chatroom.chatMessages.length > 0 && dispatch({ type: TOGGLE_CHAT });\r\n      if (chatroom.chatMessages.length > 0) {\r\n        dispatch({ type: TOGGLE_CHAT });\r\n        let memberId = chatroom.members.filter(member => member._id !== props.user._id);\r\n        props.markMessagesRead(chatroom._id, memberId);\r\n      }\r\n    } else {\r\n      // There is no chatRoom, stay in 'contacts'\r\n      dispatch({ type: TOGGLE_CONTACTS });\r\n      console.log('no chatroom');\r\n\r\n      // chatmessages: [] at chatroomModel?\r\n      // If there is no chatroom found, create a new chatroom.\r\n      // When the chatRoom is created, send it: socket.emit(CREATED_CHAT_MESSAGE, res.data.doc) to the server.\r\n      // dispatch SET_ACTIVE_CHATROOM which updates the props.activeChatRoom of the current user to the newly created chatroom\r\n      // the server socket.joins(newChatRoom._id) with the current socket.\r\n      // Server emits EMIT_CREATED_CHATROOM to chatMessageArea\r\n      // dispatch CREATE_CHAT_ROOM which updates the props.chatrooms of the chatRoomsMembers, updating the state. can't create 2 rooms ✅\r\n      // socket.emit(MEMBERS_JOIN_CHAT_ROOMS, newCreatedChatRoomId) to the server, so all connected members join the new chat room.\r\n      // TODO: Notification on unread messages\r\n      // TODO: set an expiry time on the chatRoom if no messages are sent within one hour/day?\r\n      // TODO: process nog een x doorlopen, misschien kan er wel een emit of dispatch tussen uit. bijvoorbeeld na onchange, als we toch emitten naar iedereen, en dan pas de members filteren.\r\n      props.createChatRoom(props.socket, null, clickedContact._id, props.user._id);\r\n    }\r\n  };\r\n\r\n  const countTotalUnreadMessages = props.chatRooms.map(room => {\r\n    return room.chatMessages.filter(message => {\r\n      return message.read === false && message.userId !== props.user._id;\r\n    }).length;\r\n  });\r\n\r\n  let totalUnreadMessages;\r\n  if (countTotalUnreadMessages[0]) {\r\n    totalUnreadMessages = countTotalUnreadMessages.reduce((a, b) => a + b);\r\n  }\r\n  console.log(totalUnreadMessages);\r\n\r\n  return (\r\n    <List>\r\n      <Grid container className={classes.chatButtons}>\r\n        <Grid item xs={4} style={{ borderRight: '1px solid lightgrey' }}>\r\n          <ListItem\r\n            button\r\n            onClick={e => {\r\n              dispatch({ type: TOGGLE_CONTACTS });\r\n              dispatch({ type: SET_NO_ACTIVE_CHATROOM });\r\n              console.log(toggleFriendList);\r\n            }}>\r\n            <ListItemText style={{ textAlign: 'center' }}>\r\n              <Tooltip title='Contacten' placement='top-start' arrow interactive>\r\n                {/* Contacts */}\r\n                {props.theme === 'dark' ? <PeopleAltIcon /> : <PeopleAltIcon color='primary' />}\r\n              </Tooltip>\r\n            </ListItemText>\r\n          </ListItem>\r\n        </Grid>\r\n        <Grid item xs={4} style={{ borderRight: '1px solid lightgrey' }}>\r\n          <ListItem\r\n            style={{ justifyContent: 'center' }}\r\n            button\r\n            onClick={e => {\r\n              dispatch({ type: TOGGLE_CHAT });\r\n              dispatch({ type: SET_NO_ACTIVE_CHATROOM });\r\n              console.log(toggleFriendList);\r\n            }}>\r\n            {toggleFriendList === 'contacts' && totalUnreadMessages > 0 ? (\r\n              <Badge badgeContent={totalUnreadMessages} max={9} color='secondary'>\r\n                <ListItemText style={{ textAlign: 'center' }}>\r\n                  <Tooltip\r\n                    title={\r\n                      totalUnreadMessages > 1\r\n                        ? `${totalUnreadMessages} nieuwe berichten`\r\n                        : `${totalUnreadMessages} nieuw bericht`\r\n                    }\r\n                    placement='top-start'\r\n                    arrow\r\n                    interactive>\r\n                    {/* Chats */}\r\n                    {props.theme === 'dark' ? <MessageIcon /> : <MessageIcon color='primary' />}\r\n                  </Tooltip>\r\n                </ListItemText>\r\n              </Badge>\r\n            ) : (\r\n              <ListItemText style={{ textAlign: 'center' }}>\r\n                <Tooltip title='Berichten' placement='top-start' arrow interactive>\r\n                  {/* Chats */}\r\n                  {props.theme === 'dark' ? <MessageIcon /> : <MessageIcon color='primary' />}\r\n                </Tooltip>\r\n              </ListItemText>\r\n            )}\r\n          </ListItem>\r\n        </Grid>\r\n\r\n        {/* Add Group */}\r\n        <CreateGroupModal />\r\n      </Grid>\r\n\r\n      {/* Render chats with messages with more than 2 members */}\r\n      {props.chatRooms && toggleFriendList === 'chats'\r\n        ? props.chatRooms.map(room => {\r\n            if (room.members.length > 2) {\r\n              return <GroupChat room={room} key={room._id} />;\r\n            }\r\n\r\n            // Render chats with messages with max 2 members\r\n            // Render ONLINE CHAT users: sorted: chat with last received message on top\r\n            return (\r\n              room.chatMessages.length > 0 &&\r\n              room.members.map(member => {\r\n                if (room.members.length === 2) {\r\n                  if (\r\n                    Object.values(props.connectedUsers).includes(member._id) &&\r\n                    member.username !== props.user.username\r\n                  ) {\r\n                    return (\r\n                      <ListItem\r\n                        button\r\n                        key={room._id}\r\n                        onClick={e => {\r\n                          console.log('click');\r\n                          console.log(`Room Id: ${room._id}`);\r\n                          props.getSingleChatRoom(room._id);\r\n\r\n                          let memberId = room.members.filter(\r\n                            member => member._id !== props.user._id,\r\n                          );\r\n\r\n                          props.markMessagesRead(room._id, memberId);\r\n\r\n                          // props.socket.emit('roomId', room._id);\r\n                        }}>\r\n                        <ListItemIcon>\r\n                          <StyledBadge\r\n                            overlap='circle'\r\n                            anchorOrigin={{\r\n                              vertical: 'bottom',\r\n                              horizontal: 'right',\r\n                            }}\r\n                            variant='dot'>\r\n                            <Avatar alt={member.username.toUpperCase()} src={member.avatar} />\r\n                          </StyledBadge>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={firstCharUpperCase(member.username)}></ListItemText>\r\n                        <Badge\r\n                          badgeContent={\r\n                            room._id !== props.activeChatRoom._id\r\n                              ? room.chatMessages.filter(message => {\r\n                                  return (\r\n                                    message.username !== props.user.username &&\r\n                                    message.read === false\r\n                                  );\r\n                                }).length\r\n                              : 0\r\n                          }\r\n                          color='secondary'\r\n                          max={9}>\r\n                          <ListItemText\r\n                            secondary={props.lastMessages.map(lastMessage => {\r\n                              if (lastMessage && lastMessage.chatRoomId === room._id) {\r\n                                return lastMessage.body;\r\n                              }\r\n                              return null;\r\n                            })}\r\n                            align='right'></ListItemText>\r\n                        </Badge>\r\n                      </ListItem>\r\n                    );\r\n                    // Render OFFLINE CHAT users\r\n                  } else if (member.username !== props.user.username) {\r\n                    return (\r\n                      <ListItem\r\n                        button\r\n                        key={room._id}\r\n                        onClick={e => {\r\n                          console.log('click');\r\n                          console.log(`Room Id: ${room._id}`);\r\n                          props.getSingleChatRoom(room._id);\r\n\r\n                          let memberId = room.members.filter(\r\n                            member => member._id !== props.user._id,\r\n                          );\r\n\r\n                          props.markMessagesRead(room._id, memberId);\r\n                          // props.socket.emit('roomId', room._id);\r\n                        }}>\r\n                        <ListItemIcon>\r\n                          <Avatar alt={member.username.toUpperCase()} src={member.avatar} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={firstCharUpperCase(member.username)}>\r\n                          {firstCharUpperCase(member.username)}\r\n                        </ListItemText>\r\n\r\n                        <Badge\r\n                          badgeContent={\r\n                            room._id !== props.activeChatRoom._id\r\n                              ? room.chatMessages.filter(message => {\r\n                                  return (\r\n                                    message.username !== props.user.username &&\r\n                                    message.read === false\r\n                                  );\r\n                                }).length\r\n                              : 0\r\n                          }\r\n                          color='secondary'\r\n                          max={9}>\r\n                          <ListItemText\r\n                            secondary={props.lastMessages.map(lastMessage => {\r\n                              if (lastMessage && lastMessage.chatRoomId === room._id) {\r\n                                return lastMessage.body;\r\n                              }\r\n                              return null;\r\n                            })}\r\n                            align='right'\r\n                          />\r\n                        </Badge>\r\n                      </ListItem>\r\n                    );\r\n                  }\r\n                }\r\n                return null;\r\n              })\r\n            );\r\n          })\r\n        : // Render ONLINE CONTACTS: sorted online users first\r\n          props.users &&\r\n          toggleFriendList === 'contacts' &&\r\n          props.users.map(user => {\r\n            if (\r\n              Object.values(props.connectedUsers).includes(user._id) &&\r\n              user.username !== props.user.username\r\n            ) {\r\n              return (\r\n                <ListItem\r\n                  button\r\n                  key={user._id}\r\n                  onClick={e => {\r\n                    console.log('clicked ONLINE contact');\r\n                    // console.log(props.chatRooms);\r\n                    // console.log(user._id);\r\n                    console.log(user);\r\n                    checkIfContactHasChatRoom(user);\r\n\r\n                    // console.log(`Room Id: ${room._id}`);\r\n                    // props.getSingleChatRoom(room._id);\r\n                    // props.socket.emit('roomId', room._id);\r\n                  }}>\r\n                  <ListItemIcon>\r\n                    <StyledBadge\r\n                      overlap='circle'\r\n                      anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                      }}\r\n                      variant='dot'>\r\n                      <Avatar alt={user.username.toUpperCase()} src={user.avatar} />\r\n                    </StyledBadge>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={firstCharUpperCase(user.username)}>\r\n                    {firstCharUpperCase(user.username)}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              );\r\n            }\r\n            // Render OFFLINE CONTACTS\r\n            else if (user.username !== props.user.username) {\r\n              return (\r\n                <ListItem\r\n                  button\r\n                  key={user._id}\r\n                  onClick={e => {\r\n                    console.log('clicked OFFLINE contact');\r\n                    // console.log(props.chatRooms);\r\n                    // console.log(user._id);\r\n                    console.log(user);\r\n\r\n                    checkIfContactHasChatRoom(user);\r\n                  }}>\r\n                  <ListItemIcon>\r\n                    <Avatar alt={user.username.toUpperCase()} src={user.avatar} />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={firstCharUpperCase(user.username)}>\r\n                    {firstCharUpperCase(user.username)}\r\n                  </ListItemText>\r\n                  <ListItemText secondary='Offline' align='right'></ListItemText>\r\n                </ListItem>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    user: state.user.user,\r\n    toggleFriendList: state.chat.toggleFriendList,\r\n    chatRooms: state.chat.chatRooms,\r\n    lastMessages: state.chat.lastMessages,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    connectedUsers: state.user.connectedUsers,\r\n    users: state.user.users,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleChatRoom,\r\n  getAllUsers,\r\n  createChatRoom,\r\n  markMessagesRead,\r\n})(ChatFriendsList);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["149"],"// React\r\nimport { useEffect, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n  markMessagesRead,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\nimport {\r\n  OUTPUT_CHAT_MESSAGE,\r\n  DELETED_CHAT_MESSAGE,\r\n  CREATE_CHAT_ROOM,\r\n  EMIT_CREATED_CHAT_ROOM,\r\n  MEMBERS_JOIN_NEW_CHAT_ROOM,\r\n  TOGGLE_CHAT,\r\n} from '../redux/types';\r\n\r\nimport moment from 'moment';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst ChatMessageArea = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    user,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n    getAllUserChatRooms,\r\n    markMessagesRead,\r\n  } = props;\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Dont stack multiple callbacks, just execute once\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$OUTPUT_CHAT_MESSAGE']) {\r\n      socket._callbacks['$OUTPUT_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$EMIT_CREATED_CHAT_ROOM']) {\r\n      socket._callbacks['$EMIT_CREATED_CHAT_ROOM'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$DELETED_CHAT_MESSAGE']) {\r\n      socket._callbacks['$DELETED_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    // if (socket._callbacks !== undefined) {\r\n    //   Object.keys(socket._callbacks).map(callback => {\r\n    //     if (socket._callbacks[callback]) {\r\n    //       socket._callbacks[callback].length = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    // Listen to incoming chatMessages from the backend\r\n    socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // updates the lastChatMessage at the friendsList for both the sender and the receiver of the message.\r\n      emitLastChatMessage(messageFromBackend);\r\n\r\n      // Reorder friendList to show latest conversation on top (SENDER)\r\n      getAllUserChatRooms();\r\n\r\n      // toggle chat for the message sender\r\n      if (user._id === messageFromBackend.userId) dispatch({ type: TOGGLE_CHAT });\r\n\r\n      // Dispatch from here, so that the redux state is updated for all clients in the room.\r\n      if (messageFromBackend.chatRoomId === props.activeChatRoom._id) {\r\n        console.log('only runs when activeChatRoom === messageFromBackend.chatRoomId');\r\n        emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n\r\n        // Scroll to bottom on send and receive message when the activeChatRoom === room that message is send to\r\n        // chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n        console.log(props.chatMessages.length);\r\n        if (props.chatMessages.length >= 10) {\r\n          scrollIntoLastMessage.current.childNodes[9].scrollIntoView({\r\n            behavior: 'smooth',\r\n          });\r\n        } else if (props.chatMessages.length > 0) {\r\n          scrollIntoLastMessage.current.childNodes[props.chatMessages.length - 1].scrollIntoView({\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n\r\n        // When the received message is in the activeChatRoom, mark the message as read\r\n        let memberId = props.activeChatRoom.members.filter(member => member._id !== user._id);\r\n        markMessagesRead(props.activeChatRoom._id, memberId);\r\n      }\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n\r\n    // When a new chatRoom is created, update the props.chatRooms for all members.\r\n    socket.on(EMIT_CREATED_CHAT_ROOM, createdChatRoom => {\r\n      console.log(createdChatRoom);\r\n\r\n      // if the the current logged in user is a member of the new created chatroom, dispatch add the chatroom to the state. emit the chatroom to the server from all members, so they can all socket.join(theNewChatRoom) serverside\r\n      createdChatRoom.members.forEach(member => {\r\n        if (member._id === user._id) {\r\n          console.log(member);\r\n          dispatch({ type: CREATE_CHAT_ROOM, payload: createdChatRoom });\r\n          socket.emit(MEMBERS_JOIN_NEW_CHAT_ROOM, createdChatRoom);\r\n        }\r\n      });\r\n    });\r\n  }, [\r\n    props.chatMessages.length,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  ]);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  }, [activeChatRoom]);\r\n\r\n  // Gewoon omhoog scrollen werkt perfect\r\n  // Typen zonder omhoog te scrollen werkt perfect\r\n  // Eerst scrollen dan typen, werkt\r\n  // Eerst typen, dan scrollen, dan typen werkt\r\n\r\n  const scrollIntoLastMessage = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // childTen === pos 9, arrays 0 based\r\n    let childTen = scrollIntoLastMessage.current.childNodes[9]?.innerText.split(/\\r?\\n/)[2];\r\n    console.log(scrollIntoLastMessage.current.childNodes);\r\n    // let childTen = scrollIntoLastMessage.current.childNodes[props.chatMessages.length - 1]?.innerText.split(/\\r?\\n/)[2];\r\n    let lastMessage = props.chatMessages[props.chatMessages.length - 1]?.body;\r\n\r\n    console.log(childTen);\r\n    console.log(lastMessage);\r\n    if (props.chatMessages.length > 10) {\r\n      // if the chatMessages array length is divisible by exactly 10, scroll into the new 10th which is the top message\r\n      if (scrollIntoLastMessage.current.childNodes[10] && props.chatMessages.length % 10 === 0) {\r\n        scrollIntoLastMessage.current.childNodes[10].scrollIntoView();\r\n        console.log('if');\r\n        // if the chatMessages array length is not divisible by exactly 10, e.g. 26, substract the array length (20) of the 26, and scroll into the 6\r\n\r\n        // Not divisible by 10 === end of messages\r\n      } else if (\r\n        scrollIntoLastMessage.current.childNodes[10] &&\r\n        props.chatMessages.length % 10 !== 0\r\n      ) {\r\n        console.log('not divisible by 10');\r\n        console.log(props.chatMessages.length);\r\n        let scrollLength =\r\n          props.chatMessages.length - Math.floor(props.chatMessages.length / 10) * 10;\r\n        console.log(scrollLength);\r\n        scrollIntoLastMessage.current.childNodes[scrollLength].scrollIntoView();\r\n      } else {\r\n        console.log('else');\r\n        // chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <List ref={scrollIntoLastMessage}>\r\n        {props.activeChatRoom.chatMessages ? (\r\n          props.chatMessages.map(message => (\r\n            <ListItem key={message._id}>\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  {/* username */}\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={message.username}></ListItemText>\r\n\r\n                  {/* chat message body */}\r\n                  <ListItemText align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                    <Chip\r\n                      label={message.body}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      color={props.user._id === message.userId ? 'primary' : 'secondary'}\r\n                    />\r\n                  </ListItemText>\r\n                </Grid>\r\n\r\n                {/* timestamp */}\r\n                <Grid item xs={12}>\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={moment(message.createdAt).fromNow()}></ListItemText>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            Selecteer een gesprek\r\n          </div>\r\n        )}\r\n\r\n        <div className={'test'} ref={chatEnd} />\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    chatMessages: state.chat.chatMessages,\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n  markMessagesRead,\r\n})(ChatMessageArea);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["150","151","152"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js",[],["153","154"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js",["155"],"import { useState, useEffect } from 'react';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getAllChatMessages } from '../redux/actions/chatMessageActions';\r\n\r\n// Components\r\nimport ChatUserData from './ChatUserData';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatFriendList from './ChatFriendsList';\r\nimport ChatMessageArea from './ChatMessageArea';\r\nimport ChatInput from './ChatInput';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  userData: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    borderRight: '1px solid lightgrey',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  header: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    flex: 1,\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  list: {\r\n    // minHeight: '85vh',\r\n    height: '821px',\r\n    overflowX: 'hidden',\r\n    overflowY: 'auto',\r\n    borderRight: '1px solid lightgrey',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  chatMessages: {\r\n    height: '64vh',\r\n    overflowY: 'auto',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  input: {\r\n    paddingTop: 60,\r\n    padding: 60,\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n}));\r\n\r\nconst Mui = props => {\r\n  console.log(props);\r\n  const theme = useTheme();\r\n  const classes = useStyles(theme);\r\n  const [skip, setSkip] = useState(props.chatMessages.length);\r\n\r\n  useEffect(() => {\r\n    setSkip(props.chatMessages.length);\r\n    console.log(props.chatMessages.length);\r\n    console.log(skip);\r\n  }, [props.activeChatRoom, props.chatMessages.length]);\r\n\r\n  const handleScroll = e => {\r\n    let { scrollTop } = e.target;\r\n\r\n    // ALs de result meer dan 0 is\r\n    if (scrollTop === 0 && props.chatMessages.length >= 10) {\r\n      console.log('setSkip');\r\n      console.log(skip);\r\n      console.log(props.chatMessages.length);\r\n      setSkip(props.chatMessages.length);\r\n      props.getAllChatMessages(props.activeChatRoom._id, skip);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        {/* User Data */}\r\n        <Grid item xs={3} className={classes.userData}>\r\n          <ChatUserData />\r\n        </Grid>\r\n        <Grid item xs={9} className={classes.header}>\r\n          <ChatHeader />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Friends list */}\r\n      <Grid item container xs={12}>\r\n        <Grid item xs={3} className={classes.list}>\r\n          <ChatFriendList />\r\n        </Grid>\r\n\r\n        {/* Chat Messages */}\r\n        <Grid item container xs={9} md={9}>\r\n          <Grid item xs={12} className={classes.chatMessages} onScroll={handleScroll}>\r\n            <ChatMessageArea />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.input}>\r\n            <ChatInput />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    chatMessages: state.chat.chatMessages,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getAllChatMessages })(Mui);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js",["156"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\StyledBadge.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"157","replacedBy":"161"},{"ruleId":"159","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":60,"column":6,"nodeType":"165","endLine":60,"endColumn":8,"suggestions":"166"},{"ruleId":"163","severity":1,"message":"167","line":132,"column":6,"nodeType":"165","endLine":139,"endColumn":4,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":21,"column":8,"nodeType":"171","messageId":"172","endLine":21,"endColumn":23},{"ruleId":"163","severity":1,"message":"173","line":99,"column":6,"nodeType":"165","endLine":104,"endColumn":4,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":158,"column":48,"nodeType":"177","messageId":"178","endLine":158,"endColumn":50},{"ruleId":"157","replacedBy":"179"},{"ruleId":"159","replacedBy":"180"},{"ruleId":"163","severity":1,"message":"181","line":59,"column":6,"nodeType":"165","endLine":59,"endColumn":55,"suggestions":"182"},{"ruleId":"163","severity":1,"message":"183","line":140,"column":6,"nodeType":"165","endLine":140,"endColumn":12,"suggestions":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],["185"],["186"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["187"],"React Hook useEffect has missing dependencies: 'dispatch', 'getAllUserChatRooms', 'markMessagesRead', 'props.activeChatRoom._id', 'props.activeChatRoom.members', and 'user._id'. Either include them or remove the dependency array.",["188"],"no-unused-vars","'ChatFriendsList' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["189"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["185"],["186"],"React Hook useEffect has a missing dependency: 'skip'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'props.user._id' and 'props.users'. Either include them or remove the dependency array.",["191"],"no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [props]",{"range":"202","text":"203"},"Update the dependencies array to be: [props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",{"range":"204","text":"205"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"206","text":"207"},"Update the dependencies array to be: [props.activeChatRoom, props.chatMessages.length, skip]",{"range":"208","text":"209"},"Update the dependencies array to be: [open, props.user._id, props.users]",{"range":"210","text":"211"},[2290,2292],"[props]",[4974,5172],"[props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",[2962,3108],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",[1587,1636],"[props.activeChatRoom, props.chatMessages.length, skip]",[3832,3838],"[open, props.user._id, props.users]"]