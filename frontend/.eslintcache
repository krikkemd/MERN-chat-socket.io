[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20"},{"size":637,"mtime":1613245639965,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":847,"mtime":1614436808556,"results":"24","hashOfConfig":"22"},{"size":4105,"mtime":1614176207017,"results":"25","hashOfConfig":"22"},{"size":2994,"mtime":1614353230994,"results":"26","hashOfConfig":"22"},{"size":717,"mtime":1614350269782,"results":"27","hashOfConfig":"22"},{"size":1091,"mtime":1614170695529,"results":"28","hashOfConfig":"22"},{"size":207,"mtime":1613462400030,"results":"29","hashOfConfig":"22"},{"size":1893,"mtime":1614355065800,"results":"30","hashOfConfig":"22"},{"size":413,"mtime":1613674734759,"results":"31","hashOfConfig":"22"},{"size":4319,"mtime":1614176310573,"results":"32","hashOfConfig":"22"},{"size":1003,"mtime":1614090313374,"results":"33","hashOfConfig":"22"},{"size":1087,"mtime":1614090402270,"results":"34","hashOfConfig":"22"},{"size":2870,"mtime":1614352526545,"results":"35","hashOfConfig":"22"},{"size":158,"mtime":1613641508407,"results":"36","hashOfConfig":"22"},{"size":701,"mtime":1613647450576,"results":"37","hashOfConfig":"22"},{"size":2487,"mtime":1614248348990,"results":"38","hashOfConfig":"22"},{"size":2322,"mtime":1614437492504,"results":"39","hashOfConfig":"22"},{"size":5691,"mtime":1614437306712,"results":"40","hashOfConfig":"22"},{"size":8807,"mtime":1614436701046,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1r1jcwq",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["84","85"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["86"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["87"],"// React\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\n// Receive from server types:\r\nimport { OUTPUT_CHAT_MESSAGE, DELETED_CHAT_MESSAGE } from '../redux/types';\r\n\r\nimport moment from 'moment';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport noImg from '../images/no-img.png';\r\n\r\nconst ChatMessageArea = props => {\r\n  // Local State\r\n  const [chatMessage, setChatMessage] = useState('');\r\n\r\n  const {\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  } = props;\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Dont stack multiple callbacks, just execute once\r\n    if (socket._callbacks['$OUTPUT_CHAT_MESSAGE']) {\r\n      socket._callbacks['$OUTPUT_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    console.log(props);\r\n    console.log(socket._callbacks);\r\n\r\n    // Listen to incoming chatMessages from the backend\r\n    socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // Dispatch from here, so that the redux state is updated for all clients.\r\n      if (messageFromBackend.chatRoomId === props.activeChatRoom._id) {\r\n        console.log('YESSSSSSSSSSSS');\r\n        emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n      }\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n  }, [\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  ]);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  });\r\n\r\n  //   Local funcions\r\n  const handleChange = e => {\r\n    setChatMessage(e.target.value);\r\n  };\r\n\r\n  const submitChatMessage = e => {\r\n    e.preventDefault();\r\n\r\n    // Create chat message action\r\n    props.createChatMessage({\r\n      chatRoomId: props.activeChatRoom._id,\r\n      body: chatMessage,\r\n    });\r\n\r\n    setChatMessage('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List className={props.classes.messageArea}>\r\n        {props.activeChatRoom.chatMessages ? (\r\n          props.chatMessages.map(message => (\r\n            <ListItem key={message._id}>\r\n              <Grid container>\r\n                <Grid item xs={12}></Grid>\r\n                <Grid item xs={12}>\r\n                  {/* username */}\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={message.username}></ListItemText>\r\n\r\n                  {/* chat message body */}\r\n                  <ListItemText align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                    <Chip\r\n                      avatar={<Avatar alt={props.user.username} src={noImg} />}\r\n                      label={message.body}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      color='primary'\r\n                    />\r\n                  </ListItemText>\r\n                </Grid>\r\n\r\n                {/* timestamp */}\r\n                <Grid item xs={12}>\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={moment(message.createdAt).fromNow()}></ListItemText>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <div>No Messages yet</div>\r\n        )}\r\n\r\n        <div ref={chatEnd} />\r\n      </List>\r\n\r\n      <Divider />\r\n      <Grid container style={{ padding: '20px' }}>\r\n        <Grid item xs={11}>\r\n          <form onSubmit={submitChatMessage}>\r\n            <TextField\r\n              id='outlined-basic-email'\r\n              label='Type Something'\r\n              fullWidth\r\n              autoFocus={true}\r\n              value={chatMessage}\r\n              onChange={handleChange}\r\n            />\r\n          </form>\r\n        </Grid>\r\n        <Grid align='right'>\r\n          <Fab color='primary' aria-label='add'>\r\n            <SendIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    chatMessages: state.chat.chatMessages,\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n})(ChatMessageArea);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["88","89","90"],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":27,"column":42,"nodeType":"97","messageId":"98","endLine":27,"endColumn":44},{"ruleId":"99","severity":1,"message":"100","line":73,"column":6,"nodeType":"101","endLine":78,"endColumn":4,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":21,"column":8,"nodeType":"105","messageId":"106","endLine":21,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":99,"column":6,"nodeType":"101","endLine":104,"endColumn":4,"suggestions":"107"},{"ruleId":"95","severity":1,"message":"96","line":158,"column":48,"nodeType":"97","messageId":"98","endLine":158,"endColumn":50},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["110"],"no-unused-vars","'ChatFriendsList' is defined but never used.","Identifier","unusedVar",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"116","text":"117"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"118","text":"119"},[2491,2631],"[socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",[2950,3096],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]"]