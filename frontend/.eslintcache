[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js":"21","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js":"22","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js":"23","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js":"24","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js":"25","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js":"26","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js":"27","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js":"28","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js":"29","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js":"30","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js":"31","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js":"32","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js":"33"},{"size":637,"mtime":1613245639965,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":1670,"mtime":1616144381180,"results":"37","hashOfConfig":"35"},{"size":4108,"mtime":1615995430123,"results":"38","hashOfConfig":"35"},{"size":4808,"mtime":1616597945344,"results":"39","hashOfConfig":"35"},{"size":794,"mtime":1615563177104,"results":"40","hashOfConfig":"35"},{"size":1739,"mtime":1615995430223,"results":"41","hashOfConfig":"35"},{"size":207,"mtime":1614944673940,"results":"42","hashOfConfig":"35"},{"size":5784,"mtime":1616515823922,"results":"43","hashOfConfig":"35"},{"size":413,"mtime":1614944673940,"results":"44","hashOfConfig":"35"},{"size":4309,"mtime":1615995430126,"results":"45","hashOfConfig":"35"},{"size":2533,"mtime":1615995430222,"results":"46","hashOfConfig":"35"},{"size":1087,"mtime":1614944673937,"results":"47","hashOfConfig":"35"},{"size":2924,"mtime":1615995430224,"results":"48","hashOfConfig":"35"},{"size":158,"mtime":1613641508407,"results":"49","hashOfConfig":"35"},{"size":701,"mtime":1614944673940,"results":"50","hashOfConfig":"35"},{"size":2530,"mtime":1615453539391,"results":"51","hashOfConfig":"35"},{"size":16658,"mtime":1616594390868,"results":"52","hashOfConfig":"35"},{"size":9320,"mtime":1616486658651,"results":"53","hashOfConfig":"35"},{"size":8807,"mtime":1615122441440,"results":"54","hashOfConfig":"35"},{"size":1755,"mtime":1615453539411,"results":"55","hashOfConfig":"35"},{"size":1333,"mtime":1615995430226,"results":"56","hashOfConfig":"35"},{"size":3001,"mtime":1616158469733,"results":"57","hashOfConfig":"35"},{"size":445,"mtime":1615995430148,"results":"58","hashOfConfig":"35"},{"size":100,"mtime":1615453539430,"results":"59","hashOfConfig":"35"},{"size":1987,"mtime":1615995430120,"results":"60","hashOfConfig":"35"},{"size":2527,"mtime":1616586465216,"results":"61","hashOfConfig":"35"},{"size":3222,"mtime":1616517014876,"results":"62","hashOfConfig":"35"},{"size":1952,"mtime":1616144381191,"results":"63","hashOfConfig":"35"},{"size":1813,"mtime":1616081642172,"results":"64","hashOfConfig":"35"},{"size":2893,"mtime":1616013667415,"results":"65","hashOfConfig":"35"},{"size":2736,"mtime":1616529620389,"results":"66","hashOfConfig":"35"},{"size":9013,"mtime":1616600474552,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1r1jcwq",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["146","147"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",["148","149","150"],"import './css/App.css';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport darkTheme from './util/darkTheme';\r\nimport lightTheme from './util/lightTheme';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// React Router DOM\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n// Components\r\nimport Login from './Components/Login';\r\nimport Chat from './Components/Chat';\r\nimport Truncate from './Components/Truncate';\r\nimport Mui from './Components/Mui';\r\n\r\n// Util components\r\nimport AuthRoute from './util/AuthRoute';\r\nimport UploadAvatar from './util/UploadAvatar';\r\nimport Spinner from './util/Spinner';\r\nimport ToggleTheme from './util/ToggleTheme';\r\n\r\n// moment.js\r\nimport moment from 'moment';\r\nimport 'moment/locale/nl';\r\nmoment.locale('nl');\r\n\r\nfunction App(props) {\r\n  return (\r\n    <Router>\r\n      <ThemeProvider\r\n        theme={props.theme === 'light' ? createMuiTheme(lightTheme) : createMuiTheme(darkTheme)}>\r\n        <Paper style={{ height: '100vh' }}>\r\n          <div className='app'>\r\n            <Switch>\r\n              <AuthRoute exact path='/' component={Mui} />\r\n              <AuthRoute exact path='/upload' component={UploadAvatar} />\r\n              <Route exact path='/login' component={Login} />\r\n              <Route exact path='/spin' component={Spinner} />\r\n            </Switch>\r\n          </div>\r\n          <ToggleTheme />\r\n        </Paper>\r\n      </ThemeProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],["151","152"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",["153"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",["154","155","156","157","158","159","160"],"import {\r\n  GET_ALL_CHAT_MESSAGES,\r\n  CREATE_CHAT_MESSAGE,\r\n  SET_LAST_CHAT_MESSAGE,\r\n  DELETE_CHAT_MESSAGE,\r\n  SET_ACTIVE_CHATROOM,\r\n  SET_USER_CHATROOMS,\r\n  CREATE_CHAT_ROOM,\r\n  TOGGLE_CHAT,\r\n  TOGGLE_CONTACTS,\r\n  SET_NO_ACTIVE_CHATROOM,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n  chatMessages: [],\r\n  chatRooms: [],\r\n  lastMessages: [],\r\n  activeChatRoom: [],\r\n  toggleFriendList: 'contacts',\r\n  // loading: true,\r\n};\r\nexport default function chatMessageReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ALL_CHAT_MESSAGES:\r\n      return {\r\n        ...state,\r\n        chatMessages: [...action.payload.reverse(), ...state.chatMessages],\r\n      };\r\n\r\n    case CREATE_CHAT_MESSAGE:\r\n      let chatMessages = [...state.chatMessages];\r\n      console.log(state.chatMessages.length);\r\n      // When a user has scrolled up to get older messages, shrink the array down to 10 again, so it scrolls into the created message\r\n      if (chatMessages.length > 10) {\r\n        chatMessages = chatMessages.slice(state.chatMessages.length - 10);\r\n      }\r\n      console.log(chatMessages);\r\n      return {\r\n        ...state,\r\n        // lastMessages: newLastMessages,\r\n        chatMessages:\r\n          state.chatMessages.length > 9\r\n            ? [...chatMessages, action.payload].slice(1) // keep the max size of chatMessages at 10\r\n            : [...state.chatMessages, action.payload],\r\n      };\r\n\r\n    case SET_LAST_CHAT_MESSAGE: {\r\n      // only return lastMessages where the message is not undefined\r\n      let newLastMessages = [...state.lastMessages].filter(message => message && message);\r\n      // console.log(newLastMessages);\r\n\r\n      // Resort the friendslist on last created message\r\n      newLastMessages.map((message, i) => {\r\n        if (message.chatRoomId === action.payload.chatRoomId) {\r\n          return (newLastMessages[i] = { ...action.payload });\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        lastMessages: newLastMessages,\r\n      };\r\n    }\r\n    case DELETE_CHAT_MESSAGE: {\r\n      // console.log('reducer', action.payload); // payload here ==- screamId\r\n      // let filteredScreams = state.screams.filter(scream => scream.screamId !== action.payload);\r\n      // return {\r\n      //   ...state,\r\n      //   screams: filteredScreams,\r\n      // };\r\n\r\n      // findIndex stops when the index is found, filter does not. findindex should be faster here\r\n\r\n      let index = state.chatMessages.findIndex(message => message._id === action.payload);\r\n      let filteredChatMessages = [...state.chatMessages];\r\n      filteredChatMessages.splice(index, 1);\r\n\r\n      console.log(filteredChatMessages);\r\n      console.log(state);\r\n      return {\r\n        ...state,\r\n        chatMessages: filteredChatMessages,\r\n      };\r\n    }\r\n    case SET_USER_CHATROOMS: // Only chatRooms that have messages are rendered\r\n      let lastMessages = action.payload.map(room => room.chatMessages[0]);\r\n      // console.log(action.payload);\r\n\r\n      let sortedChatRooms = [...action.payload];\r\n\r\n      // only return the chatrooms where there are chatmessages if there are 2 room members, also return groupchats // not sure if this works correctly\r\n      sortedChatRooms = sortedChatRooms.filter(room => {\r\n        if (\r\n          (room.chatMessages.length > 0 && room.members.length === 2) ||\r\n          room.members.length > 2\r\n        ) {\r\n          return room;\r\n        }\r\n      });\r\n\r\n      sortedChatRooms.sort((a, b) => {\r\n        if (a.chatMessages[0] && b.chatMessages[0]) {\r\n          return new Date(b.chatMessages[0].createdAt) - new Date(a.chatMessages[0].createdAt);\r\n        } else {\r\n          console.log('NO CHATMESSAGES TO SORT');\r\n          return;\r\n        }\r\n      });\r\n\r\n      console.log(state);\r\n      console.log(sortedChatRooms);\r\n\r\n      // Mark chatmessage as read if the user has the chatroom open (without having to click the chatroom )\r\n      sortedChatRooms.map(room => {\r\n        if (room._id === state.activeChatRoom._id) {\r\n          console.log('mark messages read');\r\n          room.chatMessages.map(message => {\r\n            if (message.read === false) {\r\n              // console.log(message);\r\n              message.read = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        // loading: false,\r\n        lastMessages: lastMessages,\r\n        // chatRooms: action.payload,\r\n        chatRooms: sortedChatRooms, // initial sort on page load/refresh. rerender sorting happens in SET_LAST_CHAT_MESSAGE\r\n      };\r\n    case SET_ACTIVE_CHATROOM:\r\n      // console.log(action.payload);\r\n      // console.log(state);\r\n\r\n      // set chatroom message as read\r\n      let rooms = state.chatRooms?.filter(room => {\r\n        if (action.payload._id === room._id) {\r\n          room.chatMessages?.filter(message => {\r\n            if (message.read === false) {\r\n              message.read = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      console.log(rooms);\r\n\r\n      return {\r\n        ...state,\r\n        activeChatRoom: action.payload,\r\n        chatMessages: action.payload.chatMessages.reverse(),\r\n      };\r\n    case CREATE_CHAT_ROOM: {\r\n      const newChatRooms = [...state.chatRooms];\r\n      console.log(newChatRooms);\r\n      console.log(action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        chatRooms: [...newChatRooms, action.payload],\r\n      };\r\n    }\r\n    case SET_NO_ACTIVE_CHATROOM: {\r\n      return {\r\n        ...state,\r\n        activeChatRoom: [],\r\n      };\r\n    }\r\n    case TOGGLE_CHAT: {\r\n      return {\r\n        ...state,\r\n        toggleFriendList: 'chats',\r\n      };\r\n    }\r\n    case TOGGLE_CONTACTS: {\r\n      return {\r\n        ...state,\r\n        toggleFriendList: 'contacts',\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",["161"],"import {\r\n  SET_ERRORS,\r\n  LOGIN_USER,\r\n  SET_CURRENT_USER,\r\n  GET_ALL_USERS,\r\n  UPDATE_CONNECTED_USERLIST,\r\n  UPDATE_AVATAR,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n  connectedUsers: {},\r\n  users: [],\r\n  user: {},\r\n  loading: true,\r\n  errors: [],\r\n};\r\n\r\nexport default function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOGIN_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        user: action.payload.user,\r\n      };\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        user: action.payload.currentUser,\r\n      };\r\n    case GET_ALL_USERS:\r\n      let allUsers = [...action.payload];\r\n\r\n      let sortedAllUsers = allUsers.sort(function (a, b) {\r\n        var textA = a.username.toUpperCase();\r\n        var textB = b.username.toUpperCase();\r\n        return textA < textB ? -1 : textA > textB ? 1 : 0;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        users: sortedAllUsers,\r\n      };\r\n    case UPDATE_CONNECTED_USERLIST:\r\n      // userlist from backend\r\n      const onlineUsers = { ...action.payload };\r\n      console.log(onlineUsers);\r\n\r\n      const sortedByOnlineUsers = [...state.users];\r\n\r\n      // Display online users on top in the contacts friendlist\r\n      sortedByOnlineUsers.map(user => {\r\n        if (Object.values(onlineUsers).includes(user._id)) {\r\n          console.log(user);\r\n          user.online = true;\r\n        } else {\r\n          user.online = false;\r\n        }\r\n\r\n        sortedByOnlineUsers.sort((a, b) => {\r\n          return b.online - a.online;\r\n        });\r\n      });\r\n\r\n      // Sorting contacts in the friendlist: Online users on top, then alphabetically. no good yet...\r\n      sortedByOnlineUsers.sort((a, b) => {\r\n        if (b.online > a.online) {\r\n          return 1;\r\n        }\r\n        if (a.username.toLowerCase() < b.username.toLowerCase()) {\r\n          return -1;\r\n        }\r\n        if (a.username.toLowerCase() > b.username.toLowerCase()) {\r\n          return 0;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      console.log(sortedByOnlineUsers);\r\n\r\n      return {\r\n        ...state,\r\n        users: sortedByOnlineUsers,\r\n        connectedUsers: action.payload,\r\n      };\r\n    case UPDATE_AVATAR:\r\n      console.log(action.payload);\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case SET_ERRORS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errors: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",["162"],"// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Components\r\nimport ChatFriendsList from './ChatFriendsList';\r\n\r\n// Helper functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport ChatMessageArea from './ChatMessageArea';\r\nimport ChatHeader from './ChatHeader';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    // height: '80vh',\r\n  },\r\n  headBG: {\r\n    backgroundColor: '#e0e0e0',\r\n  },\r\n  borderRight500: {\r\n    borderRight: '1px solid #e0e0e0',\r\n  },\r\n  messageArea: {\r\n    height: '60vh',\r\n    overflowY: 'auto',\r\n  },\r\n});\r\n\r\nconst Chat = props => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Grid container></Grid>\r\n      <Grid container component={Paper} className={classes.chatSection}>\r\n        <Grid item xs={3} className={classes.borderRight500}>\r\n          <List>\r\n            <ListItem button key={props.user._id}>\r\n              <ListItemIcon>\r\n                <Avatar alt={props.user.username.toUpperCase()} src={props.user.avatar} />\r\n              </ListItemIcon>\r\n              <ListItemText primary={firstCharUpperCase(props.user.username)}></ListItemText>\r\n            </ListItem>\r\n          </List>\r\n          <Divider />\r\n          <Grid item xs={12} style={{ padding: '10px' }}>\r\n            <TextField id='outlined-basic-email' label='Search' variant='outlined' fullWidth />\r\n          </Grid>\r\n          <Divider />\r\n\r\n          {/* Friend list */}\r\n          <ChatFriendsList />\r\n\r\n          {/*  */}\r\n        </Grid>\r\n        <Grid item xs={9}>\r\n          {/* Header */}\r\n          <ChatHeader />\r\n\r\n          {/* Chat Message Area */}\r\n          <ChatMessageArea classes={classes} />\r\n\r\n          {/*  */}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["163","164","165","166","167","168","169"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["170","171","172"],"// React\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n  markMessagesRead,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\nimport {\r\n  OUTPUT_CHAT_MESSAGE,\r\n  DELETED_CHAT_MESSAGE,\r\n  CREATE_CHAT_ROOM,\r\n  EMIT_CREATED_CHAT_ROOM,\r\n  MEMBERS_JOIN_NEW_CHAT_ROOM,\r\n  TOGGLE_CHAT,\r\n} from '../redux/types';\r\n\r\nimport moment from 'moment';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst ChatMessageArea = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    user,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n    getAllUserChatRooms,\r\n    markMessagesRead,\r\n  } = props;\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Dont stack multiple callbacks, just execute once\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$OUTPUT_CHAT_MESSAGE']) {\r\n      socket._callbacks['$OUTPUT_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$EMIT_CREATED_CHAT_ROOM']) {\r\n      socket._callbacks['$EMIT_CREATED_CHAT_ROOM'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$DELETED_CHAT_MESSAGE']) {\r\n      socket._callbacks['$DELETED_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    // if (socket._callbacks !== undefined) {\r\n    //   Object.keys(socket._callbacks).map(callback => {\r\n    //     if (socket._callbacks[callback]) {\r\n    //       socket._callbacks[callback].length = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    // Listen to incoming chatMessages from the backend\r\n    socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // updates the lastChatMessage at the friendsList for both the sender and the receiver of the message.\r\n      emitLastChatMessage(messageFromBackend);\r\n\r\n      // Reorder friendList to show latest conversation on top (SENDER)\r\n      getAllUserChatRooms();\r\n\r\n      // toggle chat for the message sender\r\n      if (user._id === messageFromBackend.userId) dispatch({ type: TOGGLE_CHAT });\r\n\r\n      // Dispatch from here, so that the redux state is updated for all clients in the room.\r\n      if (messageFromBackend.chatRoomId === props.activeChatRoom._id) {\r\n        console.log('only runs when activeChatRoom === messageFromBackend.chatRoomId');\r\n        emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n\r\n        // Scroll to bottom on send and receive message when the activeChatRoom === room that message is send to\r\n        // chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n        console.log(props.chatMessages.length);\r\n        if (props.chatMessages.length >= 10) {\r\n          scrollIntoLastMessage.current.childNodes[9].scrollIntoView({\r\n            behavior: 'smooth',\r\n          });\r\n        } else if (props.chatMessages.length > 0) {\r\n          scrollIntoLastMessage.current.childNodes[props.chatMessages.length - 1].scrollIntoView({\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n\r\n        // When the received message is in the activeChatRoom, mark the message as read\r\n        let memberId = props.activeChatRoom.members.filter(member => member._id !== user._id);\r\n        markMessagesRead(props.activeChatRoom._id, memberId);\r\n      }\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n\r\n    // When a new chatRoom is created, update the props.chatRooms for all members.\r\n    socket.on(EMIT_CREATED_CHAT_ROOM, createdChatRoom => {\r\n      console.log(createdChatRoom);\r\n\r\n      // if the the current logged in user is a member of the new created chatroom, dispatch add the chatroom to the state. emit the chatroom to the server from all members, so they can all socket.join(theNewChatRoom) serverside\r\n      createdChatRoom.members.map(member => {\r\n        if (member._id === user._id) {\r\n          console.log(member);\r\n          dispatch({ type: CREATE_CHAT_ROOM, payload: createdChatRoom });\r\n          socket.emit(MEMBERS_JOIN_NEW_CHAT_ROOM, createdChatRoom);\r\n        }\r\n      });\r\n    });\r\n  }, [\r\n    props.chatMessages.length,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  ]);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  }, [activeChatRoom]);\r\n\r\n  // Gewoon omhoog scrollen werkt perfect\r\n  // Typen zonder omhoog te scrollen werkt perfect\r\n  // Eerst scrollen dan typen, werkt\r\n  // Eerst typen, dan scrollen, dan typen werkt\r\n\r\n  const scrollIntoLastMessage = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // childTen === pos 9, arrays 0 based\r\n    let childTen = scrollIntoLastMessage.current.childNodes[9]?.innerText.split(/\\r?\\n/)[2];\r\n    console.log(scrollIntoLastMessage.current.childNodes);\r\n    // let childTen = scrollIntoLastMessage.current.childNodes[props.chatMessages.length - 1]?.innerText.split(/\\r?\\n/)[2];\r\n    let lastMessage = props.chatMessages[props.chatMessages.length - 1]?.body;\r\n\r\n    console.log(childTen);\r\n    console.log(lastMessage);\r\n    if (props.chatMessages.length > 10) {\r\n      // if the chatMessages array length is divisible by exactly 10, scroll into the new 10th which is the top message\r\n      if (scrollIntoLastMessage.current.childNodes[10] && props.chatMessages.length % 10 === 0) {\r\n        scrollIntoLastMessage.current.childNodes[10].scrollIntoView();\r\n        console.log('if');\r\n        // if the chatMessages array length is not divisible by exactly 10, e.g. 26, substract the array length (20) of the 26, and scroll into the 6\r\n\r\n        // Not divisible by 10 === end of messages\r\n      } else if (\r\n        scrollIntoLastMessage.current.childNodes[10] &&\r\n        props.chatMessages.length % 10 !== 0\r\n      ) {\r\n        console.log('not divisible by 10');\r\n        console.log(props.chatMessages.length);\r\n        let scrollLength =\r\n          props.chatMessages.length - Math.floor(props.chatMessages.length / 10) * 10;\r\n        console.log(scrollLength);\r\n        scrollIntoLastMessage.current.childNodes[scrollLength].scrollIntoView();\r\n      } else {\r\n        console.log('else');\r\n        // chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <List ref={scrollIntoLastMessage}>\r\n        {props.activeChatRoom.chatMessages ? (\r\n          props.chatMessages.map(message => (\r\n            <ListItem key={message._id}>\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  {/* username */}\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={message.username}></ListItemText>\r\n\r\n                  {/* chat message body */}\r\n                  <ListItemText align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                    <Chip\r\n                      label={message.body}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      color={props.user._id === message.userId ? 'primary' : 'secondary'}\r\n                    />\r\n                  </ListItemText>\r\n                </Grid>\r\n\r\n                {/* timestamp */}\r\n                <Grid item xs={12}>\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={moment(message.createdAt).fromNow()}></ListItemText>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            Selecteer een gesprek\r\n          </div>\r\n        )}\r\n\r\n        <div className={'test'} ref={chatEnd} />\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    chatMessages: state.chat.chatMessages,\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n  markMessagesRead,\r\n})(ChatMessageArea);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["173","174","175"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js",["176"],"import { useState, useEffect } from 'react';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getAllChatMessages } from '../redux/actions/chatMessageActions';\r\n\r\n// Components\r\nimport ChatUserData from './ChatUserData';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatFriendList from './ChatFriendsList';\r\nimport ChatMessageArea from './ChatMessageArea';\r\nimport ChatInput from './ChatInput';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  userData: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    borderRight: '1px solid lightgrey',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  header: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    flex: 1,\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  list: {\r\n    minHeight: '85vh',\r\n    borderRight: '1px solid lightgrey',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  chatMessages: {\r\n    height: '64vh',\r\n    overflowY: 'auto',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  input: {\r\n    paddingTop: 60,\r\n    padding: 60,\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n}));\r\n\r\nconst Mui = props => {\r\n  console.log(props);\r\n  const theme = useTheme();\r\n  const classes = useStyles(theme);\r\n  const [skip, setSkip] = useState(props.chatMessages.length);\r\n\r\n  useEffect(() => {\r\n    setSkip(props.chatMessages.length);\r\n    console.log(props.chatMessages.length);\r\n    console.log(skip);\r\n  }, [props.activeChatRoom, props.chatMessages.length]);\r\n\r\n  const handleScroll = e => {\r\n    let { scrollTop } = e.target;\r\n\r\n    // ALs de result meer dan 0 is\r\n    if (scrollTop === 0 && props.chatMessages.length >= 10) {\r\n      console.log('setSkip');\r\n      console.log(skip);\r\n      console.log(props.chatMessages.length);\r\n      setSkip(props.chatMessages.length);\r\n      props.getAllChatMessages(props.activeChatRoom._id, skip);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        {/* User Data */}\r\n        <Grid item xs={3} className={classes.userData}>\r\n          <ChatUserData />\r\n        </Grid>\r\n        <Grid item xs={9} className={classes.header}>\r\n          <ChatHeader />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Friends list */}\r\n      <Grid container xs={12}>\r\n        <Grid item xs={3} className={classes.list}>\r\n          <ChatFriendList />\r\n        </Grid>\r\n\r\n        {/* Chat Messages */}\r\n        <Grid container xs={9} md={9}>\r\n          <Grid item xs={12} className={classes.chatMessages} onScroll={handleScroll}>\r\n            <ChatMessageArea />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.input}>\r\n            <ChatInput />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    chatMessages: state.chat.chatMessages,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getAllChatMessages })(Mui);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js",["177","178","179","180"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Helper Functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingTop: 20,\r\n    paddingLeft: 20,\r\n  },\r\n  avatar: {\r\n    width: 60,\r\n    height: 60,\r\n    border: 'none',\r\n  },\r\n  members: {\r\n    fontWeight: 'bold',\r\n    marginLeft: 20,\r\n    marginRight: 10,\r\n  },\r\n  text: {\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ChatHeader = props => {\r\n  const classes = useStyles();\r\n  console.log(props);\r\n\r\n  const { user, activeChatRoom } = props;\r\n\r\n  const contact = activeChatRoom.members?.filter(member =>\r\n    user._id !== member._id ? member : null,\r\n  );\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {/* 2 chat room members */}\r\n      {contact && activeChatRoom.members.length === 2 && (\r\n        <>\r\n          <Avatar\r\n            className={classes.avatar}\r\n            alt={contact && contact[0]?.username.toUpperCase()}\r\n            src={contact && contact[0]?.avatar}\r\n          />\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n        </>\r\n      )}\r\n\r\n      {/* More than 2 chat room members */}\r\n      {contact && activeChatRoom.members.length > 2 && (\r\n        <>\r\n          <AvatarGroup max={5}>\r\n            {activeChatRoom.members.map(member => {\r\n              return (\r\n                <Avatar\r\n                  key={member._id}\r\n                  className={classes.avatar}\r\n                  alt={member.username.toUpperCase()}\r\n                  src={member.avatar}></Avatar>\r\n              );\r\n            })}\r\n          </AvatarGroup>\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChatHeader);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js",["181"],"import teal from '@material-ui/core/colors/teal';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\nexport default {\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: teal[700],\r\n    },\r\n    secondary: {\r\n      main: purple[500],\r\n    },\r\n  },\r\n  chatUserData: {\r\n    container: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      paddingTop: 20,\r\n      paddingLeft: 20,\r\n      paddingBottom: 20,\r\n    },\r\n    avatar: {\r\n      width: 60,\r\n      height: 60,\r\n    },\r\n    text: {\r\n      color: '#fff',\r\n      marginLeft: 20,\r\n    },\r\n    paper: {\r\n      position: 'absolute',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      width: 600,\r\n      height: 250,\r\n      backgroundColor: '#303030',\r\n      border: '1px solid #000',\r\n      boxShadow: '0.2rem 0.2rem rgba(0, 0, 0, 0.2)',\r\n      // boxShadow: theme.shadows[5],\r\n      // padding: theme.spacing(2, 4, 3),\r\n      outline: 0,\r\n      padding: 20,\r\n    },\r\n    modalContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      flex: 1,\r\n    },\r\n    modal: {\r\n      outline: 0,\r\n      border: 'none',\r\n    },\r\n    modalAvatar: {\r\n      width: 80,\r\n      height: 80,\r\n      // marginBottom: 10,\r\n    },\r\n    modalText: {\r\n      // fontWeight: 'bold',\r\n      // fontSize: '1.1rem',\r\n      color: '#fff',\r\n      marginLeft: 20,\r\n      flex: 1,\r\n    },\r\n  },\r\n  UploadAvatar: {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    input: {\r\n      display: 'none',\r\n    },\r\n    photoIcon: {\r\n      height: 25,\r\n      width: 25,\r\n    },\r\n    buttonContainer: {\r\n      width: '100%',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n    },\r\n    uploadButton: {\r\n      marginLeft: 20,\r\n    },\r\n    text: {\r\n      color: '#fff',\r\n      paddingTop: 50,\r\n      paddingBottom: 10,\r\n      alignSelf: 'center',\r\n    },\r\n  },\r\n};\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js",["182"],"import teal from '@material-ui/core/colors/teal';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\nexport default {\r\n  palette: {\r\n    type: 'light',\r\n    primary: {\r\n      main: teal[700],\r\n    },\r\n    secondary: {\r\n      main: purple[500],\r\n    },\r\n  },\r\n  chatUserData: {\r\n    container: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      paddingTop: 20,\r\n      paddingLeft: 20,\r\n      paddingBottom: 20,\r\n    },\r\n    avatar: {\r\n      width: 60,\r\n      height: 60,\r\n    },\r\n    text: {\r\n      color: '#fff',\r\n      marginLeft: 20,\r\n    },\r\n    paper: {\r\n      position: 'absolute',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      width: 600,\r\n      height: 250,\r\n      backgroundColor: '#fbfcfc',\r\n      border: '1px solid #000',\r\n      boxShadow: '0.2rem 0.2rem rgba(0, 0, 0, 0.2)',\r\n      outline: 0,\r\n      padding: 20,\r\n    },\r\n    modalContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      flex: 1,\r\n    },\r\n    modal: {\r\n      outline: 0,\r\n      border: 'none',\r\n    },\r\n    modalAvatar: {\r\n      width: 80,\r\n      height: 80,\r\n    },\r\n    modalText: {\r\n      // fontSize: '1.1rem',\r\n      color: '#000',\r\n      marginLeft: 20,\r\n      flex: 1,\r\n    },\r\n  },\r\n  UploadAvatar: {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    input: {\r\n      display: 'none',\r\n    },\r\n    photoIcon: {\r\n      height: 25,\r\n      width: 25,\r\n    },\r\n    buttonContainer: {\r\n      width: '100%',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n    },\r\n    uploadButton: {\r\n      marginLeft: 20,\r\n    },\r\n    text: {\r\n      color: '#000',\r\n      paddingTop: 50,\r\n      paddingBottom: 10,\r\n      alignSelf: 'center',\r\n    },\r\n  },\r\n};\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js",["183","184"],"// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Redux ChatMessage Actions\r\nimport { getSingleChatRoom, markMessagesRead } from '../redux/actions/chatMessageActions';\r\n\r\n// MUI\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst GroupChat = props => {\r\n  console.log(props);\r\n  const { room } = props;\r\n\r\n  return (\r\n    <ListItem\r\n      key={room._id}\r\n      button\r\n      onClick={e => {\r\n        console.log('click');\r\n        console.log(room);\r\n        console.log(`Room Id: ${room._id}`);\r\n        props.getSingleChatRoom(room._id);\r\n\r\n        let memberId = room.members.filter(member => member._id !== props.user._id);\r\n\r\n        //   messageReadBy =  read\r\n        props.markMessagesRead(room._id, memberId);\r\n      }}>\r\n      <ListItemIcon>\r\n        <AvatarGroup max={3} spacing='medium'>\r\n          {room.members.map(member => {\r\n            if (member._id !== props.user._id) {\r\n              return (\r\n                <Avatar\r\n                  alt={member.username}\r\n                  src={member.avatar}\r\n                  style={{ border: 'none' }}\r\n                  key={member._id}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </AvatarGroup>\r\n      </ListItemIcon>\r\n      <ListItemText primary={room.name} style={{ marginLeft: 10 }}></ListItemText>\r\n      <Badge\r\n        badgeContent={\r\n          room._id !== props.activeChatRoom._id\r\n            ? room.chatMessages.filter(message => {\r\n                return message.username !== props.user.username && message.read === false;\r\n              }).length\r\n            : 0\r\n        }\r\n        color='secondary'\r\n        max={9}>\r\n        <ListItemText\r\n          secondary={props.lastMessages.map(lastMessage => {\r\n            if (lastMessage && lastMessage.chatRoomId === room._id) {\r\n              return lastMessage.body;\r\n            }\r\n          })}\r\n          align='right'></ListItemText>\r\n      </Badge>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    user: state.user.user,\r\n    toggleFriendList: state.chat.toggleFriendList,\r\n    chatRooms: state.chat.chatRooms,\r\n    lastMessages: state.chat.lastMessages,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    connectedUsers: state.user.connectedUsers,\r\n    users: state.user.users,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getSingleChatRoom, markMessagesRead })(GroupChat);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js",["185","186","187"],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":15,"column":8,"nodeType":"194","messageId":"195","endLine":15,"endColumn":16},{"ruleId":"192","severity":1,"message":"196","line":16,"column":8,"nodeType":"194","messageId":"195","endLine":16,"endColumn":12},{"ruleId":"192","severity":1,"message":"197","line":17,"column":8,"nodeType":"194","messageId":"195","endLine":17,"endColumn":16},{"ruleId":"188","replacedBy":"198"},{"ruleId":"190","replacedBy":"199"},{"ruleId":"192","severity":1,"message":"200","line":8,"column":3,"nodeType":"194","messageId":"195","endLine":8,"endColumn":20},{"ruleId":"201","severity":1,"message":"202","line":53,"column":40,"nodeType":"203","messageId":"204","endLine":53,"endColumn":42},{"ruleId":"201","severity":1,"message":"205","line":92,"column":53,"nodeType":"203","messageId":"204","endLine":92,"endColumn":55},{"ruleId":"201","severity":1,"message":"206","line":106,"column":11,"nodeType":"207","messageId":"208","endLine":106,"endColumn":18},{"ruleId":"201","severity":1,"message":"209","line":114,"column":32,"nodeType":"203","messageId":"210","endLine":114,"endColumn":34},{"ruleId":"201","severity":1,"message":"209","line":117,"column":41,"nodeType":"203","messageId":"210","endLine":117,"endColumn":43},{"ruleId":"201","severity":1,"message":"211","line":138,"column":48,"nodeType":"203","messageId":"210","endLine":138,"endColumn":50},{"ruleId":"201","severity":1,"message":"211","line":140,"column":45,"nodeType":"203","messageId":"210","endLine":140,"endColumn":47},{"ruleId":"201","severity":1,"message":"209","line":53,"column":36,"nodeType":"203","messageId":"210","endLine":53,"endColumn":38},{"ruleId":"192","severity":1,"message":"212","line":16,"column":8,"nodeType":"194","messageId":"195","endLine":16,"endColumn":18},{"ruleId":"213","severity":1,"message":"214","line":74,"column":6,"nodeType":"215","endLine":74,"endColumn":8,"suggestions":"216"},{"ruleId":"201","severity":1,"message":"209","line":81,"column":30,"nodeType":"203","messageId":"210","endLine":81,"endColumn":32},{"ruleId":"201","severity":1,"message":"209","line":82,"column":31,"nodeType":"203","messageId":"210","endLine":82,"endColumn":33},{"ruleId":"201","severity":1,"message":"202","line":204,"column":39,"nodeType":"203","messageId":"204","endLine":204,"endColumn":41},{"ruleId":"201","severity":1,"message":"202","line":253,"column":75,"nodeType":"203","messageId":"204","endLine":253,"endColumn":77},{"ruleId":"201","severity":1,"message":"202","line":301,"column":75,"nodeType":"203","messageId":"204","endLine":301,"endColumn":77},{"ruleId":"201","severity":1,"message":"202","line":319,"column":32,"nodeType":"203","messageId":"204","endLine":319,"endColumn":34},{"ruleId":"192","severity":1,"message":"217","line":2,"column":21,"nodeType":"194","messageId":"195","endLine":2,"endColumn":29},{"ruleId":"201","severity":1,"message":"209","line":124,"column":42,"nodeType":"203","messageId":"210","endLine":124,"endColumn":44},{"ruleId":"213","severity":1,"message":"218","line":132,"column":6,"nodeType":"215","endLine":139,"endColumn":4,"suggestions":"219"},{"ruleId":"192","severity":1,"message":"220","line":21,"column":8,"nodeType":"194","messageId":"195","endLine":21,"endColumn":23},{"ruleId":"213","severity":1,"message":"221","line":99,"column":6,"nodeType":"215","endLine":104,"endColumn":4,"suggestions":"222"},{"ruleId":"201","severity":1,"message":"202","line":158,"column":48,"nodeType":"203","messageId":"204","endLine":158,"endColumn":50},{"ruleId":"213","severity":1,"message":"223","line":56,"column":6,"nodeType":"215","endLine":56,"endColumn":55,"suggestions":"224"},{"ruleId":"192","severity":1,"message":"225","line":2,"column":8,"nodeType":"194","messageId":"195","endLine":2,"endColumn":14},{"ruleId":"192","severity":1,"message":"226","line":3,"column":8,"nodeType":"194","messageId":"195","endLine":3,"endColumn":15},{"ruleId":"192","severity":1,"message":"227","line":4,"column":8,"nodeType":"194","messageId":"195","endLine":4,"endColumn":12},{"ruleId":"192","severity":1,"message":"228","line":8,"column":8,"nodeType":"194","messageId":"195","endLine":8,"endColumn":15},{"ruleId":"229","severity":1,"message":"230","line":4,"column":1,"nodeType":"231","endLine":96,"endColumn":3},{"ruleId":"229","severity":1,"message":"230","line":4,"column":1,"nodeType":"231","endLine":92,"endColumn":3},{"ruleId":"201","severity":1,"message":"202","line":36,"column":36,"nodeType":"203","messageId":"204","endLine":36,"endColumn":38},{"ruleId":"201","severity":1,"message":"202","line":62,"column":57,"nodeType":"203","messageId":"204","endLine":62,"endColumn":59},{"ruleId":"192","severity":1,"message":"232","line":4,"column":19,"nodeType":"194","messageId":"195","endLine":4,"endColumn":30},{"ruleId":"213","severity":1,"message":"233","line":139,"column":6,"nodeType":"215","endLine":139,"endColumn":12,"suggestions":"234"},{"ruleId":"201","severity":1,"message":"209","line":148,"column":28,"nodeType":"203","messageId":"210","endLine":148,"endColumn":30},"no-native-reassign",["235"],"no-negated-in-lhs",["236"],"no-unused-vars","'ChatPage' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'Truncate' is defined but never used.",["235"],["236"],"'CREATED_CHAT_ROOM' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.filter() expects a value to be returned at the end of arrow function.","Array.prototype.sort() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","Array.prototype.map() expects a return value from arrow function.","expectedInside","Array.prototype.filter() expects a return value from arrow function.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["237"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getAllUserChatRooms', 'markMessagesRead', 'props.activeChatRoom._id', 'props.activeChatRoom.members', and 'user._id'. Either include them or remove the dependency array.",["238"],"'ChatFriendsList' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["239"],"React Hook useEffect has a missing dependency: 'skip'. Either include it or remove the dependency array.",["240"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Grid' is defined but never used.","'Divider' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'props.user._id' and 'props.users'. Either include them or remove the dependency array.",["241"],"no-global-assign","no-unsafe-negation",{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},"Update the dependencies array to be: [props]",{"range":"252","text":"253"},"Update the dependencies array to be: [props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",{"range":"254","text":"255"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"256","text":"257"},"Update the dependencies array to be: [props.activeChatRoom, props.chatMessages.length, skip]",{"range":"258","text":"259"},"Update the dependencies array to be: [open, props.user._id, props.users]",{"range":"260","text":"261"},[2615,2617],"[props]",[4980,5178],"[props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",[2962,3108],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",[1512,1561],"[props.activeChatRoom, props.chatMessages.length, skip]",[3740,3746],"[open, props.user._id, props.users]"]