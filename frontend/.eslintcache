[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js":"21","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js":"22","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js":"23","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js":"24","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js":"25","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js":"26","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js":"27","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js":"28","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js":"29","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js":"30","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js":"31","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js":"32","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js":"33","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\StyledBadge.js":"34"},{"size":637,"mtime":1613245639965,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":1584,"mtime":1617372644520,"results":"38","hashOfConfig":"36"},{"size":4108,"mtime":1615995430123,"results":"39","hashOfConfig":"36"},{"size":6761,"mtime":1619598206602,"results":"40","hashOfConfig":"36"},{"size":794,"mtime":1617365567971,"results":"41","hashOfConfig":"36"},{"size":1880,"mtime":1619282222745,"results":"42","hashOfConfig":"36"},{"size":207,"mtime":1614944673940,"results":"43","hashOfConfig":"36"},{"size":7411,"mtime":1619605721322,"results":"44","hashOfConfig":"36"},{"size":413,"mtime":1614944673940,"results":"45","hashOfConfig":"36"},{"size":4309,"mtime":1617706933271,"results":"46","hashOfConfig":"36"},{"size":2688,"mtime":1617550691878,"results":"47","hashOfConfig":"36"},{"size":1449,"mtime":1619363898046,"results":"48","hashOfConfig":"36"},{"size":2945,"mtime":1619010470235,"results":"49","hashOfConfig":"36"},{"size":158,"mtime":1613641508407,"results":"50","hashOfConfig":"36"},{"size":775,"mtime":1619090338700,"results":"51","hashOfConfig":"36"},{"size":2474,"mtime":1617372606687,"results":"52","hashOfConfig":"36"},{"size":18201,"mtime":1619605000224,"results":"53","hashOfConfig":"36"},{"size":10408,"mtime":1619605040885,"results":"54","hashOfConfig":"36"},{"size":8807,"mtime":1615122441440,"results":"55","hashOfConfig":"36"},{"size":1755,"mtime":1615453539411,"results":"56","hashOfConfig":"36"},{"size":1333,"mtime":1615995430226,"results":"57","hashOfConfig":"36"},{"size":3083,"mtime":1617707593056,"results":"58","hashOfConfig":"36"},{"size":445,"mtime":1615995430148,"results":"59","hashOfConfig":"36"},{"size":100,"mtime":1615453539430,"results":"60","hashOfConfig":"36"},{"size":1987,"mtime":1615995430120,"results":"61","hashOfConfig":"36"},{"size":3079,"mtime":1619181708479,"results":"62","hashOfConfig":"36"},{"size":4903,"mtime":1619599541030,"results":"63","hashOfConfig":"36"},{"size":1984,"mtime":1617549139821,"results":"64","hashOfConfig":"36"},{"size":1847,"mtime":1617549073368,"results":"65","hashOfConfig":"36"},{"size":2893,"mtime":1616013667415,"results":"66","hashOfConfig":"36"},{"size":3609,"mtime":1619605368083,"results":"67","hashOfConfig":"36"},{"size":9506,"mtime":1619165350949,"results":"68","hashOfConfig":"36"},{"size":751,"mtime":1617115345737,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1r1jcwq",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["145","146"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],["147","148"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",["149"],"import {\r\n  GET_ALL_CHAT_MESSAGES,\r\n  CREATE_CHAT_MESSAGE,\r\n  SET_LAST_CHAT_MESSAGE,\r\n  DELETE_CHAT_MESSAGE,\r\n  SET_ACTIVE_CHATROOM,\r\n  SET_USER_CHATROOMS,\r\n  CREATE_CHAT_ROOM,\r\n  LEAVE_CHATROOM,\r\n  LEFT_CHATROOM,\r\n  TOGGLE_CHAT,\r\n  TOGGLE_CONTACTS,\r\n  SET_NO_ACTIVE_CHATROOM,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n  chatMessages: [],\r\n  chatRooms: [],\r\n  lastMessages: [],\r\n  activeChatRoom: [],\r\n  toggleFriendList: 'contacts',\r\n  // loading: true,\r\n};\r\nexport default function chatMessageReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ALL_CHAT_MESSAGES:\r\n      return {\r\n        ...state,\r\n        chatMessages: [...action.payload.reverse(), ...state.chatMessages],\r\n      };\r\n\r\n    case CREATE_CHAT_MESSAGE:\r\n      let chatMessages = [...state.chatMessages];\r\n      console.log(state.chatMessages.length);\r\n      // When a user has scrolled up to get older messages, shrink the array down to 10 again, so it scrolls into the created message\r\n      if (chatMessages.length > 10) {\r\n        chatMessages = chatMessages.slice(state.chatMessages.length - 10);\r\n      }\r\n      console.log(chatMessages);\r\n      return {\r\n        ...state,\r\n        // lastMessages: newLastMessages,\r\n        chatMessages:\r\n          state.chatMessages.length > 9\r\n            ? [...chatMessages, action.payload].slice(1) // keep the max size of chatMessages at 10\r\n            : [...state.chatMessages, action.payload],\r\n      };\r\n\r\n    case SET_LAST_CHAT_MESSAGE: {\r\n      // only return lastMessages where the message is not undefined\r\n      let newLastMessages = [...state.lastMessages].filter(message => message && message);\r\n      // console.log(newLastMessages);\r\n\r\n      // Resort the friendslist on last created message\r\n      newLastMessages.map((message, i) => {\r\n        if (message.chatRoomId === action.payload.chatRoomId) {\r\n          return (newLastMessages[i] = { ...action.payload });\r\n        }\r\n        return null;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        lastMessages: newLastMessages,\r\n      };\r\n    }\r\n    case DELETE_CHAT_MESSAGE: {\r\n      // console.log('reducer', action.payload); // payload here ==- screamId\r\n      // let filteredScreams = state.screams.filter(scream => scream.screamId !== action.payload);\r\n      // return {\r\n      //   ...state,\r\n      //   screams: filteredScreams,\r\n      // };\r\n\r\n      // findIndex stops when the index is found, filter does not. findindex should be faster here\r\n\r\n      let index = state.chatMessages.findIndex(message => message._id === action.payload);\r\n      let filteredChatMessages = [...state.chatMessages];\r\n      filteredChatMessages.splice(index, 1);\r\n\r\n      console.log(filteredChatMessages);\r\n      console.log(state);\r\n      return {\r\n        ...state,\r\n        chatMessages: filteredChatMessages,\r\n      };\r\n    }\r\n    case SET_USER_CHATROOMS: // Only chatRooms that have messages are rendered\r\n      let lastMessages = action.payload.map(room => room.chatMessages[0]);\r\n      // console.log(action.payload);\r\n\r\n      let sortedChatRooms = [...action.payload];\r\n\r\n      // only return the chatrooms where there are chatmessages if there are 2 room members, also return groupchats // not sure if this works correctly\r\n      sortedChatRooms = sortedChatRooms.filter(room => {\r\n        if (room.chatMessages.length > 0 && room.members.length >= 1) {\r\n          return room;\r\n        }\r\n        return null;\r\n      });\r\n\r\n      sortedChatRooms.sort((a, b) => {\r\n        if (a.chatMessages[0] && b.chatMessages[0]) {\r\n          return new Date(b.chatMessages[0].createdAt) - new Date(a.chatMessages[0].createdAt);\r\n        } else {\r\n          console.log('NO CHATMESSAGES TO SORT');\r\n          return null;\r\n        }\r\n      });\r\n\r\n      console.log(state);\r\n      console.log(sortedChatRooms);\r\n\r\n      // Mark chatmessage as read if the user has the chatroom open (without having to click the chatroom )\r\n      sortedChatRooms.map(room => {\r\n        if (room._id === state.activeChatRoom._id) {\r\n          console.log('mark messages read');\r\n          room.chatMessages.map(message => {\r\n            if (message.read === false) {\r\n              // console.log(message);\r\n              message.read = true;\r\n            }\r\n            return null;\r\n          });\r\n        }\r\n        return null;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        // loading: false,\r\n        lastMessages: lastMessages,\r\n        // chatRooms: action.payload,\r\n        chatRooms: sortedChatRooms, // initial sort on page load/refresh. rerender sorting happens in SET_LAST_CHAT_MESSAGE\r\n      };\r\n    case SET_ACTIVE_CHATROOM:\r\n      // console.log(action.payload);\r\n      // console.log(state);\r\n\r\n      // set chatroom message as read\r\n      let rooms = state.chatRooms?.filter(room => {\r\n        if (action.payload._id === room._id) {\r\n          room.chatMessages?.filter(message => {\r\n            if (message.read === false) {\r\n              message.read = true;\r\n            }\r\n            return null;\r\n          });\r\n        }\r\n        return null;\r\n      });\r\n      console.log(rooms);\r\n\r\n      return {\r\n        ...state,\r\n        activeChatRoom: action.payload,\r\n        chatMessages: action.payload.chatMessages.reverse(),\r\n      };\r\n    case CREATE_CHAT_ROOM: {\r\n      const newChatRooms = [...state.chatRooms];\r\n      console.log(newChatRooms);\r\n      console.log(action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        chatRooms: [...newChatRooms, action.payload],\r\n      };\r\n    }\r\n    case LEAVE_CHATROOM: {\r\n      const newChatRooms = [...state.chatRooms];\r\n      console.log(newChatRooms);\r\n      console.log(action.payload.data._id);\r\n      let roomId = action.payload.data._id;\r\n\r\n      const roomIndex = newChatRooms.findIndex(room => {\r\n        console.log(room);\r\n        return room.id === roomId;\r\n      });\r\n\r\n      console.log(roomIndex);\r\n\r\n      newChatRooms.splice(roomIndex, 1);\r\n      console.log(newChatRooms);\r\n\r\n      return {\r\n        ...state,\r\n        chatRooms: newChatRooms,\r\n      };\r\n    }\r\n    case LEFT_CHATROOM: {\r\n      const newChatRooms = [...state.chatRooms];\r\n      const newActiveChatRoom = { ...state.activeChatRoom };\r\n\r\n      console.log(newActiveChatRoom);\r\n\r\n      // console.log(action.payload);\r\n      // console.log(newChatRooms);\r\n\r\n      const { roomId, leftUserId } = action.payload;\r\n\r\n      newChatRooms.map(room => {\r\n        if (room._id === roomId) {\r\n          console.log(room);\r\n          const leftUserIndex = room.members.findIndex(member => member._id === leftUserId);\r\n          room.members.splice(leftUserIndex, 1);\r\n\r\n          // Check if there is an active chatroom\r\n          if (Object.keys(newActiveChatRoom).length !== 0) {\r\n            newActiveChatRoom.members.splice(leftUserIndex, 1);\r\n          }\r\n          console.log(room);\r\n        }\r\n      });\r\n      // console.log(newChatRooms);\r\n      return {\r\n        ...state,\r\n        chatRooms: newChatRooms,\r\n        activeChatRoom: newActiveChatRoom,\r\n      };\r\n    }\r\n    case SET_NO_ACTIVE_CHATROOM: {\r\n      return {\r\n        ...state,\r\n        activeChatRoom: [],\r\n      };\r\n    }\r\n    case TOGGLE_CHAT: {\r\n      return {\r\n        ...state,\r\n        toggleFriendList: 'chats',\r\n      };\r\n    }\r\n    case TOGGLE_CONTACTS: {\r\n      return {\r\n        ...state,\r\n        toggleFriendList: 'contacts',\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["150"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["151"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["152","153","154"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js",[],["155","156"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js",["157"],"import { useState, useEffect } from 'react';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getAllChatMessages } from '../redux/actions/chatMessageActions';\r\n\r\n// Components\r\nimport ChatUserData from './ChatUserData';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatFriendList from './ChatFriendsList';\r\nimport ChatMessageArea from './ChatMessageArea';\r\nimport ChatInput from './ChatInput';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  userData: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    borderRight: '1px solid lightgrey',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  header: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    flex: 1,\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  list: {\r\n    minHeight: '85vh',\r\n    height: '821px',\r\n    overflowX: 'hidden',\r\n    overflowY: 'auto',\r\n    borderRight: '1px solid lightgrey',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  chatMessages: {\r\n    height: '64vh',\r\n    overflowY: 'auto',\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n  input: {\r\n    paddingTop: 60,\r\n    padding: 60,\r\n    borderBottom: '1px solid lightgrey',\r\n  },\r\n}));\r\n\r\nconst Mui = props => {\r\n  console.log(props);\r\n  const theme = useTheme();\r\n  const classes = useStyles(theme);\r\n  const [skip, setSkip] = useState(props.chatMessages.length);\r\n\r\n  useEffect(() => {\r\n    setSkip(props.chatMessages.length);\r\n    console.log(props.chatMessages.length);\r\n    console.log(skip);\r\n  }, [props.activeChatRoom, props.chatMessages.length]);\r\n\r\n  const handleScroll = e => {\r\n    let { scrollTop } = e.target;\r\n\r\n    // ALs de result meer dan 0 is\r\n    if (scrollTop === 0 && props.chatMessages.length >= 10) {\r\n      console.log('setSkip');\r\n      console.log(skip);\r\n      console.log(props.chatMessages.length);\r\n      setSkip(props.chatMessages.length);\r\n      props.getAllChatMessages(props.activeChatRoom._id, skip);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        {/* User Data */}\r\n        <Grid item xs={3} className={classes.userData}>\r\n          <ChatUserData />\r\n        </Grid>\r\n        <Grid item xs={9} className={classes.header}>\r\n          <ChatHeader />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Friends list */}\r\n      <Grid item container xs={12}>\r\n        <Grid item xs={3} className={classes.list}>\r\n          <ChatFriendList />\r\n        </Grid>\r\n\r\n        {/* Chat Messages */}\r\n        <Grid item container xs={9} md={9}>\r\n          <Grid item xs={12} className={classes.chatMessages} onScroll={handleScroll}>\r\n            <ChatMessageArea />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.input}>\r\n            <ChatInput />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    chatMessages: state.chat.chatMessages,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getAllChatMessages })(Mui);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js",["158"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { useState } from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { leaveChatRoom } from '../redux/actions/chatMessageActions';\r\n\r\n// Types\r\nimport { LEAVE_CHATROOM, LEFT_CHATROOM } from '../redux/types';\r\n\r\n// Helper Functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingTop: 20,\r\n    paddingLeft: 20,\r\n  },\r\n  avatar: {\r\n    width: 60,\r\n    height: 60,\r\n    border: 'none',\r\n  },\r\n  members: {\r\n    fontWeight: 'bold',\r\n    marginLeft: 20,\r\n    marginRight: 10,\r\n  },\r\n  text: {\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ChatHeader = props => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const { user, activeChatRoom, leaveChatRoom, socket } = props;\r\n\r\n  const handleClick = event => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handeLeaveChatRoom = roomId => {\r\n    console.log('running handleLeaveChatRoom');\r\n    console.log(roomId);\r\n\r\n    if (window.confirm('Weet u zeker dat u de groep wilt verlaten?')) {\r\n      leaveChatRoom(roomId, user.username);\r\n      handleClose();\r\n      socket.emit(LEAVE_CHATROOM, roomId, user);\r\n    } else {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const contact = activeChatRoom.members?.filter(member =>\r\n    user._id !== member._id ? member : null,\r\n  );\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {/* 2 chat room members */}\r\n      {contact && activeChatRoom.members.length === 2 && !activeChatRoom.name && (\r\n        <>\r\n          <Avatar\r\n            className={classes.avatar}\r\n            alt={contact && contact[0]?.username.toUpperCase()}\r\n            src={contact && contact[0]?.avatar}\r\n          />\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n        </>\r\n      )}\r\n\r\n      {/* More than 2 chat room members */}\r\n      {contact && activeChatRoom.members.length >= 2 && activeChatRoom.name && (\r\n        <>\r\n          <AvatarGroup max={5}>\r\n            {activeChatRoom.members.map(member => {\r\n              return (\r\n                <Avatar\r\n                  key={member._id}\r\n                  className={classes.avatar}\r\n                  alt={member.username.toUpperCase()}\r\n                  src={member.avatar}></Avatar>\r\n              );\r\n            })}\r\n          </AvatarGroup>\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n\r\n          {/* Leave Group Button */}\r\n          <div style={{ marginLeft: 'auto', marginRight: 20, zIndex: 1 }}>\r\n            <IconButton>\r\n              <SettingsIcon onClick={handleClick} style={{ color: 'white' }} />\r\n              <Menu\r\n                id='simple-menu'\r\n                style={{ zIndex: 2 }}\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    handeLeaveChatRoom(activeChatRoom._id);\r\n                  }}>\r\n                  Groep Verlaten\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n              </Menu>\r\n            </IconButton>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    socket: state.socket.socket,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { leaveChatRoom })(ChatHeader);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\GroupChat.js",["159"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\CreateGroupModal.js",["160"],"import { useEffect, useState } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux chatMessage actions\r\nimport { createChatRoom } from '../redux/actions/chatMessageActions';\r\n\r\n// Helper\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { CLEAR_ERRORS, SET_ERRORS } from '../redux/types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n    border: 'none',\r\n    outline: 'none',\r\n  },\r\n  cardHeader: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  list: {\r\n    width: 300,\r\n    height: '50vh',\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter(value => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter(value => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nconst CreateGroupModal = props => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [checked, setChecked] = useState([]);\r\n  const [left, setLeft] = useState([]);\r\n  const [right, setRight] = useState([]);\r\n  const [groupName, setGroupName] = useState('');\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setRight([]);\r\n  };\r\n\r\n  const handleToggle = value => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = items => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = items => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  // Add users to left item list ComponentDidMount\r\n  useEffect(() => {\r\n    console.log('Add users left');\r\n    let users = [];\r\n    props.users.map(user => {\r\n      return props.user._id !== user._id && users.push(user);\r\n    });\r\n    setLeft(users);\r\n    console.log(users);\r\n  }, [open]);\r\n\r\n  //   Enable the submit button when 2 or more users are selected, + add current user\r\n  const handleSubmit = (e, selectedUsers) => {\r\n    e.preventDefault();\r\n    console.log(groupName);\r\n    selectedUsers = [...selectedUsers, props.user];\r\n\r\n    if (selectedUsers.length <= 2)\r\n      return dispatch({ type: SET_ERRORS, payload: 'Groep heeft te weinig leden' });\r\n\r\n    selectedUsers.forEach(user => {\r\n      console.log(user._id);\r\n    });\r\n\r\n    props.createChatRoom(\r\n      props.socket,\r\n      groupName,\r\n      selectedUsers.map(user => user._id),\r\n    );\r\n\r\n    // When ready\r\n    setGroupName('');\r\n  };\r\n\r\n  const customList = (title, items) => {\r\n    return (\r\n      <Card>\r\n        <CardHeader\r\n          className={classes.cardHeader}\r\n          avatar={\r\n            <Checkbox\r\n              onClick={handleToggleAll(items)}\r\n              checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n              indeterminate={\r\n                numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\r\n              }\r\n              disabled={items.length === 0}\r\n              inputProps={{ 'aria-label': 'all items selected' }}\r\n            />\r\n          }\r\n          title={title}\r\n          subheader={`${numberOfChecked(items)}/${items.length} geselecteerd`}\r\n        />\r\n        <Divider />\r\n        <List className={classes.list} dense component='div' role='list'>\r\n          {items.map(value => {\r\n            const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n            return (\r\n              <ListItem key={value._id} role='listitem' button onClick={handleToggle(value)}>\r\n                <ListItemIcon>\r\n                  <Avatar src={value.avatar}></Avatar>\r\n                </ListItemIcon>\r\n                <ListItemText id={labelId} primary={firstCharUpperCase(value.username)} />\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': labelId }}\r\n                />\r\n              </ListItem>\r\n            );\r\n          })}\r\n          <ListItem />\r\n        </List>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const modalBody = (\r\n    <>\r\n      <Grid container spacing={2} justify='center' alignItems='center' className={classes.root}>\r\n        <Grid item>{customList('Selecteer min 2 & max 9 leden', left)}</Grid>\r\n        <Grid item>\r\n          <Grid container direction='column' alignItems='center'>\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              className={classes.button}\r\n              onClick={handleCheckedRight}\r\n              disabled={leftChecked.length === 0}\r\n              aria-label='move selected right'>\r\n              &gt;\r\n            </Button>\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              className={classes.button}\r\n              onClick={handleCheckedLeft}\r\n              disabled={rightChecked.length === 0}\r\n              aria-label='move selected left'>\r\n              &lt;\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>{customList('Geselecteerd', right)}</Grid>\r\n      </Grid>\r\n\r\n      {/* Form */}\r\n      <form\r\n        onSubmit={e => {\r\n          console.log('submit create group');\r\n          handleSubmit(e, right);\r\n        }}\r\n        className={classes.input}\r\n        noValidate\r\n        autoComplete='off'>\r\n        <TextField\r\n          value={groupName}\r\n          onChange={e => {\r\n            dispatch({ type: CLEAR_ERRORS });\r\n            setGroupName(e.target.value);\r\n          }}\r\n          id='standard-basic'\r\n          label='Groepsnaam'\r\n          error={props.errors && props.errors.length > 0 ? true : false}\r\n          helperText={\r\n            props.errors && props.errors.length > 0 ? props.errors[props.errors.length - 1] : ''\r\n          }\r\n        />\r\n        <Button\r\n          disabled={right.length > 1 ? false : true}\r\n          onClick={e => {\r\n            console.log('submit create group');\r\n            handleSubmit(e, right);\r\n          }}\r\n          variant='contained'\r\n          color='primary'>\r\n          Groep Aanmaken\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid item xs={4}>\r\n        <ListItem\r\n          button\r\n          onClick={e => {\r\n            console.log('createNewGroup Modal');\r\n            handleOpen();\r\n            // toggle open modal with transfer list\r\n            // Select users inside the transfer list (max?)\r\n            // createGroup.then(close modal)\r\n            // Render new group (for all members?)\r\n          }}>\r\n          <ListItemText style={{ textAlign: 'center' }}>\r\n            <Tooltip title='Nieuwe Groep Maken' placement='top-start' arrow interactive>\r\n              {/* Add Group */}\r\n              {props.theme === 'dark' ? <GroupAddIcon /> : <GroupAddIcon color='primary' />}\r\n            </Tooltip>\r\n          </ListItemText>\r\n        </ListItem>\r\n      </Grid>\r\n\r\n      <div>\r\n        <Modal\r\n          className={classes.modal}\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby='simple-modal-title'\r\n          aria-describedby='simple-modal-description'>\r\n          {modalBody}\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    user: state.user.user,\r\n    users: state.user.users,\r\n    errors: state.user.errors,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { createChatRoom })(CreateGroupModal);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\StyledBadge.js",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"161","replacedBy":"165"},{"ruleId":"163","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":201,"column":29,"nodeType":"169","messageId":"170","endLine":201,"endColumn":31},{"ruleId":"171","severity":1,"message":"172","line":65,"column":6,"nodeType":"173","endLine":65,"endColumn":8,"suggestions":"174"},{"ruleId":"171","severity":1,"message":"175","line":153,"column":6,"nodeType":"173","endLine":160,"endColumn":4,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":21,"column":8,"nodeType":"179","messageId":"180","endLine":21,"endColumn":23},{"ruleId":"171","severity":1,"message":"181","line":99,"column":6,"nodeType":"173","endLine":104,"endColumn":4,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":158,"column":48,"nodeType":"169","messageId":"184","endLine":158,"endColumn":50},{"ruleId":"161","replacedBy":"185"},{"ruleId":"163","replacedBy":"186"},{"ruleId":"171","severity":1,"message":"187","line":59,"column":6,"nodeType":"173","endLine":59,"endColumn":55,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"189","line":19,"column":26,"nodeType":"179","messageId":"180","endLine":19,"endColumn":39},{"ruleId":"171","severity":1,"message":"190","line":41,"column":6,"nodeType":"173","endLine":41,"endColumn":23,"suggestions":"191"},{"ruleId":"171","severity":1,"message":"192","line":140,"column":6,"nodeType":"173","endLine":140,"endColumn":12,"suggestions":"193"},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],["194"],["195"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["196"],"React Hook useEffect has missing dependencies: 'dispatch', 'getAllUserChatRooms', 'markMessagesRead', 'props.activeChatRoom._id', 'props.activeChatRoom.members', and 'user._id'. Either include them or remove the dependency array.",["197"],"no-unused-vars","'ChatFriendsList' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["198"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["194"],["195"],"React Hook useEffect has a missing dependency: 'skip'. Either include it or remove the dependency array.",["199"],"'LEFT_CHATROOM' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'socket'. Either include them or remove the dependency array.",["200"],"React Hook useEffect has missing dependencies: 'props.user._id' and 'props.users'. Either include them or remove the dependency array.",["201"],"no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [props]",{"range":"214","text":"215"},"Update the dependencies array to be: [props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",{"range":"216","text":"217"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"218","text":"219"},"Update the dependencies array to be: [props.activeChatRoom, props.chatMessages.length, skip]",{"range":"220","text":"221"},"Update the dependencies array to be: [dispatch, props.chatRooms, socket]",{"range":"222","text":"223"},"Update the dependencies array to be: [open, props.user._id, props.users]",{"range":"224","text":"225"},[2389,2391],"[props]",[5547,5745],"[props.chatMessages.length, socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id, props.activeChatRoom.members, markMessagesRead]",[2962,3108],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",[1584,1633],"[props.activeChatRoom, props.chatMessages.length, skip]",[1212,1229],"[dispatch, props.chatRooms, socket]",[3832,3838],"[open, props.user._id, props.users]"]