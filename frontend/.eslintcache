[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20"},{"size":637,"mtime":1613245639965,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":847,"mtime":1614436808556,"results":"24","hashOfConfig":"22"},{"size":4105,"mtime":1614176207017,"results":"25","hashOfConfig":"22"},{"size":3317,"mtime":1614591729007,"results":"26","hashOfConfig":"22"},{"size":717,"mtime":1614350269782,"results":"27","hashOfConfig":"22"},{"size":1154,"mtime":1614528833543,"results":"28","hashOfConfig":"22"},{"size":207,"mtime":1613462400030,"results":"29","hashOfConfig":"22"},{"size":3722,"mtime":1614697631206,"results":"30","hashOfConfig":"22"},{"size":413,"mtime":1613674734759,"results":"31","hashOfConfig":"22"},{"size":4319,"mtime":1614176310573,"results":"32","hashOfConfig":"22"},{"size":1550,"mtime":1614699842266,"results":"33","hashOfConfig":"22"},{"size":1087,"mtime":1614090402270,"results":"34","hashOfConfig":"22"},{"size":2870,"mtime":1614515453114,"results":"35","hashOfConfig":"22"},{"size":158,"mtime":1613641508407,"results":"36","hashOfConfig":"22"},{"size":701,"mtime":1614675054945,"results":"37","hashOfConfig":"22"},{"size":2470,"mtime":1614674921204,"results":"38","hashOfConfig":"22"},{"size":6953,"mtime":1614756154681,"results":"39","hashOfConfig":"22"},{"size":6233,"mtime":1614685984181,"results":"40","hashOfConfig":"22"},{"size":8807,"mtime":1614436701046,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1r1jcwq",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["87","88"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],["89","90"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",["91"],"import {\r\n  GET_ALL_CHAT_MESSAGES,\r\n  CREATE_CHAT_MESSAGE,\r\n  SET_LAST_CHAT_MESSAGE,\r\n  DELETE_CHAT_MESSAGE,\r\n  SET_ACTIVE_CHATROOM,\r\n  SET_USER_CHATROOMS,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n  chatMessages: [],\r\n  chatRooms: [],\r\n  lastMessages: [],\r\n  activeChatRoom: [],\r\n  // loading: true,\r\n};\r\nexport default function chatMessageReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ALL_CHAT_MESSAGES:\r\n      return {\r\n        ...state,\r\n        chatMessages: action.payload,\r\n      };\r\n\r\n    case CREATE_CHAT_MESSAGE:\r\n      // room.chatMessages[0]?.body\r\n\r\n      // TODO: CODE HIERONDER RENDERT DE STATE NIET\r\n      // MISSCHIEN DOOR DE LASTMESSAGES MAPPEN, EN WAAR ACTION.PAYLOAD._ID HETZELFDE IS AL LASTMESSAGE ID VERVANGEN\r\n      // let newLastMessages = [...state.lastMessages];\r\n\r\n      // newLastMessages.map((message, i) => {\r\n      //   if (message.chatRoomId === action.payload.chatRoomId) {\r\n      //     return (newLastMessages[i] = { ...action.payload });\r\n      //   }\r\n      // });\r\n      // console.log(newLastMessages);\r\n\r\n      // console.log(lastMessage);\r\n      // state.chatRooms.map(room => {\r\n      //   if (room._id === action.payload.chatRoomId) {\r\n      //     console.log(room);\r\n      //     return (room.chatMessages[0].body = action.payload.body);\r\n      //   }\r\n      // });\r\n\r\n      return {\r\n        ...state,\r\n        // lastMessages: newLastMessages,\r\n        chatMessages:\r\n          state.chatMessages.length > 10\r\n            ? [...state.chatMessages, action.payload].slice(1) // keep the max size of chatMessages at 10\r\n            : [...state.chatMessages, action.payload],\r\n      };\r\n\r\n    case SET_LAST_CHAT_MESSAGE: {\r\n      // Resort the friendslist on last created message\r\n      let newLastMessages = [...state.lastMessages];\r\n\r\n      newLastMessages.map((message, i) => {\r\n        if (message.chatRoomId === action.payload.chatRoomId) {\r\n          return (newLastMessages[i] = { ...action.payload });\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        lastMessages: newLastMessages,\r\n      };\r\n    }\r\n    case DELETE_CHAT_MESSAGE: {\r\n      // console.log('reducer', action.payload); // payload here ==- screamId\r\n      // let filteredScreams = state.screams.filter(scream => scream.screamId !== action.payload);\r\n      // return {\r\n      //   ...state,\r\n      //   screams: filteredScreams,\r\n      // };\r\n\r\n      // findIndex stops when the index is found, filter does not. findindex should be faster here\r\n\r\n      let index = state.chatMessages.findIndex(message => message._id === action.payload);\r\n      let filteredChatMessages = [...state.chatMessages];\r\n      filteredChatMessages.splice(index, 1);\r\n\r\n      console.log(filteredChatMessages);\r\n      console.log(state);\r\n      return {\r\n        ...state,\r\n        chatMessages: filteredChatMessages,\r\n      };\r\n    }\r\n    case SET_USER_CHATROOMS:\r\n      let lastMessages = action.payload.map(room => room.chatMessages[0]);\r\n      console.log(action.payload);\r\n\r\n      let sortedChatRooms = [...action.payload];\r\n\r\n      sortedChatRooms.sort((a, b) => {\r\n        return new Date(b.chatMessages[0].createdAt) - new Date(a.chatMessages[0].createdAt);\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        // loading: false,\r\n        lastMessages: lastMessages,\r\n        // chatRooms: action.payload,\r\n        chatRooms: sortedChatRooms, // initial sort on page load/refresh. rerender sorting happens in SET_LAST_CHAT_MESSAGE\r\n      };\r\n    case SET_ACTIVE_CHATROOM:\r\n      return {\r\n        ...state,\r\n        activeChatRoom: action.payload,\r\n        chatMessages: action.payload.chatMessages.reverse(),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",["92"],"import {\r\n  SET_ERRORS,\r\n  LOGIN_USER,\r\n  SET_CURRENT_USER,\r\n  GET_ALL_USERS,\r\n  UPDATE_CONNECTED_USERLIST,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n  connectedUsers: {},\r\n  users: [],\r\n  user: {},\r\n  loading: true,\r\n  errors: [],\r\n};\r\n\r\nexport default function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOGIN_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        user: action.payload.user,\r\n      };\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        user: action.payload.currentUser,\r\n      };\r\n    case GET_ALL_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n    case UPDATE_CONNECTED_USERLIST:\r\n      const onlineUsers = { ...action.payload };\r\n\r\n      const sortedByOnlineUsers = [...state.users];\r\n\r\n      // Display online users on top in the contacts friendlist\r\n      sortedByOnlineUsers.map(user => {\r\n        if (Object.values(onlineUsers).includes(user._id)) {\r\n          console.log(user);\r\n          user.online = true;\r\n        } else {\r\n          user.online = false;\r\n        }\r\n\r\n        sortedByOnlineUsers.sort((a, b) => {\r\n          return b.online - a.online;\r\n        });\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        users: sortedByOnlineUsers,\r\n        connectedUsers: action.payload,\r\n      };\r\n    case SET_ERRORS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errors: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["93","94","95","96"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["97"],"// React\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\n// Receive from server types:\r\nimport { OUTPUT_CHAT_MESSAGE, DELETED_CHAT_MESSAGE } from '../redux/types';\r\n\r\nimport moment from 'moment';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport noImg from '../images/no-img.png';\r\n\r\nconst ChatMessageArea = props => {\r\n  // Local State\r\n  const [chatMessage, setChatMessage] = useState('');\r\n\r\n  const {\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n    getAllUserChatRooms,\r\n  } = props;\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Dont stack multiple callbacks, just execute once\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$OUTPUT_CHAT_MESSAGE']) {\r\n      socket._callbacks['$OUTPUT_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    // console.log(props);\r\n    // console.log(socket._callbacks);\r\n\r\n    // Listen to incoming chatMessages from the backend\r\n    socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // updates the lastChatMessage at the friendsList for both the sender and the receiver of the message.\r\n      emitLastChatMessage(messageFromBackend);\r\n\r\n      // Reorder friendList to show latest conversation on top (SENDER)\r\n      getAllUserChatRooms();\r\n\r\n      // Dispatch from here, so that the redux state is updated for all client in the room.\r\n      if (messageFromBackend.chatRoomId === props.activeChatRoom._id) {\r\n        console.log('only runs when activeChatRoom === messageFromBackend.chatRoomId');\r\n        emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n      }\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n  }, [\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  ]);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  });\r\n\r\n  //   Local funcions\r\n  const handleChange = e => {\r\n    setChatMessage(e.target.value);\r\n  };\r\n\r\n  const submitChatMessage = e => {\r\n    e.preventDefault();\r\n\r\n    // Create chat message action\r\n    props.createChatMessage({\r\n      chatRoomId: props.activeChatRoom._id,\r\n      body: chatMessage,\r\n    });\r\n\r\n    setChatMessage('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List className={props.classes.messageArea}>\r\n        {props.activeChatRoom.chatMessages ? (\r\n          props.chatMessages.map(message => (\r\n            <ListItem key={message._id}>\r\n              <Grid container>\r\n                <Grid item xs={12}></Grid>\r\n                <Grid item xs={12}>\r\n                  {/* username */}\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={message.username}></ListItemText>\r\n\r\n                  {/* chat message body */}\r\n                  <ListItemText align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                    <Chip\r\n                      avatar={<Avatar alt={props.user.username} src={noImg} />}\r\n                      label={message.body}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      color='primary'\r\n                    />\r\n                  </ListItemText>\r\n                </Grid>\r\n\r\n                {/* timestamp */}\r\n                <Grid item xs={12}>\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={moment(message.createdAt).fromNow()}></ListItemText>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <div>No Messages yet</div>\r\n        )}\r\n\r\n        <div ref={chatEnd} />\r\n      </List>\r\n\r\n      <Divider />\r\n      <Grid container style={{ padding: '20px' }}>\r\n        <Grid item xs={11}>\r\n          <form onSubmit={submitChatMessage}>\r\n            <TextField\r\n              id='outlined-basic-email'\r\n              label='Type Something'\r\n              fullWidth\r\n              autoFocus={true}\r\n              value={chatMessage}\r\n              onChange={handleChange}\r\n            />\r\n          </form>\r\n        </Grid>\r\n        <Grid align='right'>\r\n          <Fab color='primary' aria-label='add'>\r\n            <SendIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    chatMessages: state.chat.chatMessages,\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n})(ChatMessageArea);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["98","99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"105"},{"ruleId":"103","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":60,"column":40,"nodeType":"109","messageId":"110","endLine":60,"endColumn":42},{"ruleId":"107","severity":1,"message":"111","line":42,"column":36,"nodeType":"109","messageId":"112","endLine":42,"endColumn":38},{"ruleId":"113","severity":1,"message":"114","line":58,"column":6,"nodeType":"115","endLine":58,"endColumn":8,"suggestions":"116"},{"ruleId":"107","severity":1,"message":"108","line":98,"column":44,"nodeType":"109","messageId":"110","endLine":98,"endColumn":46},{"ruleId":"107","severity":1,"message":"108","line":115,"column":69,"nodeType":"109","messageId":"110","endLine":115,"endColumn":71},{"ruleId":"107","severity":1,"message":"108","line":129,"column":32,"nodeType":"109","messageId":"110","endLine":129,"endColumn":34},{"ruleId":"113","severity":1,"message":"117","line":84,"column":6,"nodeType":"115","endLine":90,"endColumn":4,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":21,"column":8,"nodeType":"121","messageId":"122","endLine":21,"endColumn":23},{"ruleId":"113","severity":1,"message":"123","line":99,"column":6,"nodeType":"115","endLine":104,"endColumn":4,"suggestions":"124"},{"ruleId":"107","severity":1,"message":"108","line":158,"column":48,"nodeType":"109","messageId":"110","endLine":158,"endColumn":50},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],["125"],["126"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["127"],"React Hook useEffect has missing dependencies: 'getAllUserChatRooms' and 'props.activeChatRoom._id'. Either include them or remove the dependency array.",["128"],"no-unused-vars","'ChatFriendsList' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["129"],"no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [props]",{"range":"136","text":"137"},"Update the dependencies array to be: [socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, props.activeChatRoom._id]",{"range":"138","text":"139"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"140","text":"141"},[2077,2079],"[props]",[2959,3125],"[socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, props.activeChatRoom._id]",[2950,3096],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]"]