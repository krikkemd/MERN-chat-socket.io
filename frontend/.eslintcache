[{"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js":"1","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js":"3","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js":"4","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js":"5","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js":"6","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js":"7","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js":"8","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js":"9","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js":"10","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js":"11","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js":"12","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js":"13","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js":"14","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js":"15","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js":"16","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js":"17","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js":"18","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js":"19","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js":"20","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js":"21","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js":"22","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js":"23","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js":"24","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js":"25","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js":"26","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js":"27","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js":"28","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js":"29","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js":"30","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js":"31","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Upload.js":"32"},{"size":637,"mtime":1613245639965,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":1717,"mtime":1615990609106,"results":"36","hashOfConfig":"34"},{"size":4108,"mtime":1615824090180,"results":"37","hashOfConfig":"34"},{"size":4151,"mtime":1615537259913,"results":"38","hashOfConfig":"34"},{"size":794,"mtime":1615563177104,"results":"39","hashOfConfig":"34"},{"size":1739,"mtime":1615985385052,"results":"40","hashOfConfig":"34"},{"size":207,"mtime":1614944673940,"results":"41","hashOfConfig":"34"},{"size":5152,"mtime":1615555103774,"results":"42","hashOfConfig":"34"},{"size":413,"mtime":1614944673940,"results":"43","hashOfConfig":"34"},{"size":4309,"mtime":1615564245951,"results":"44","hashOfConfig":"34"},{"size":2533,"mtime":1615985573302,"results":"45","hashOfConfig":"34"},{"size":1087,"mtime":1614944673937,"results":"46","hashOfConfig":"34"},{"size":2924,"mtime":1615457213497,"results":"47","hashOfConfig":"34"},{"size":158,"mtime":1613641508407,"results":"48","hashOfConfig":"34"},{"size":701,"mtime":1614944673940,"results":"49","hashOfConfig":"34"},{"size":2530,"mtime":1615453539391,"results":"50","hashOfConfig":"34"},{"size":15547,"mtime":1615829693786,"results":"51","hashOfConfig":"34"},{"size":6313,"mtime":1615564203803,"results":"52","hashOfConfig":"34"},{"size":8807,"mtime":1615122441440,"results":"53","hashOfConfig":"34"},{"size":1755,"mtime":1615453539411,"results":"54","hashOfConfig":"34"},{"size":1333,"mtime":1615562476669,"results":"55","hashOfConfig":"34"},{"size":1925,"mtime":1615456868099,"results":"56","hashOfConfig":"34"},{"size":445,"mtime":1615556608912,"results":"57","hashOfConfig":"34"},{"size":100,"mtime":1615453539430,"results":"58","hashOfConfig":"34"},{"size":1987,"mtime":1615562901399,"results":"59","hashOfConfig":"34"},{"size":3379,"mtime":1615989494442,"results":"60","hashOfConfig":"34"},{"size":2046,"mtime":1615453539394,"results":"61","hashOfConfig":"34"},{"size":269,"mtime":1615453539420,"results":"62","hashOfConfig":"34"},{"size":270,"mtime":1615453539430,"results":"63","hashOfConfig":"34"},{"size":2977,"mtime":1615991413206,"results":"64","hashOfConfig":"34"},{"size":1019,"mtime":1615903114579,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1r1jcwq",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\index.js",[],["138","139"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\App.js",["140","141","142"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatPage.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\chatMessageActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\store.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\types.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\config\\axios.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\chatMessageReducer.js",["143","144","145","146","147","148"],"import {\r\n  GET_ALL_CHAT_MESSAGES,\r\n  CREATE_CHAT_MESSAGE,\r\n  SET_LAST_CHAT_MESSAGE,\r\n  DELETE_CHAT_MESSAGE,\r\n  SET_ACTIVE_CHATROOM,\r\n  SET_USER_CHATROOMS,\r\n  CREATE_CHAT_ROOM,\r\n  TOGGLE_CHAT,\r\n  TOGGLE_CONTACTS,\r\n  SET_NO_ACTIVE_CHATROOM,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n  chatMessages: [],\r\n  chatRooms: [],\r\n  lastMessages: [],\r\n  activeChatRoom: [],\r\n  toggleFriendList: 'contacts',\r\n  // loading: true,\r\n};\r\nexport default function chatMessageReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ALL_CHAT_MESSAGES:\r\n      return {\r\n        ...state,\r\n        chatMessages: action.payload,\r\n      };\r\n\r\n    case CREATE_CHAT_MESSAGE:\r\n      return {\r\n        ...state,\r\n        // lastMessages: newLastMessages,\r\n        chatMessages:\r\n          state.chatMessages.length > 10\r\n            ? [...state.chatMessages, action.payload].slice(1) // keep the max size of chatMessages at 10\r\n            : [...state.chatMessages, action.payload],\r\n      };\r\n\r\n    case SET_LAST_CHAT_MESSAGE: {\r\n      // only return lastMessages where the message is not undefined\r\n      let newLastMessages = [...state.lastMessages].filter(message => message && message);\r\n      // console.log(newLastMessages);\r\n\r\n      // Resort the friendslist on last created message\r\n      newLastMessages.map((message, i) => {\r\n        if (message.chatRoomId === action.payload.chatRoomId) {\r\n          return (newLastMessages[i] = { ...action.payload });\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        lastMessages: newLastMessages,\r\n      };\r\n    }\r\n    case DELETE_CHAT_MESSAGE: {\r\n      // console.log('reducer', action.payload); // payload here ==- screamId\r\n      // let filteredScreams = state.screams.filter(scream => scream.screamId !== action.payload);\r\n      // return {\r\n      //   ...state,\r\n      //   screams: filteredScreams,\r\n      // };\r\n\r\n      // findIndex stops when the index is found, filter does not. findindex should be faster here\r\n\r\n      let index = state.chatMessages.findIndex(message => message._id === action.payload);\r\n      let filteredChatMessages = [...state.chatMessages];\r\n      filteredChatMessages.splice(index, 1);\r\n\r\n      console.log(filteredChatMessages);\r\n      console.log(state);\r\n      return {\r\n        ...state,\r\n        chatMessages: filteredChatMessages,\r\n      };\r\n    }\r\n    case SET_USER_CHATROOMS: // Only chatRooms that have messages are rendered\r\n      let lastMessages = action.payload.map(room => room.chatMessages[0]);\r\n      // console.log(action.payload);\r\n\r\n      let sortedChatRooms = [...action.payload];\r\n\r\n      // only return the chatrooms where there are chatmessages // not sure if this works correctly\r\n      sortedChatRooms = sortedChatRooms.filter(room => room.chatMessages.length > 0 && room);\r\n\r\n      sortedChatRooms.sort((a, b) => {\r\n        if (a.chatMessages[0] && b.chatMessages[0]) {\r\n          return new Date(b.chatMessages[0].createdAt) - new Date(a.chatMessages[0].createdAt);\r\n        } else {\r\n          console.log('NO CHATMESSAGES TO SORT');\r\n          return;\r\n        }\r\n      });\r\n\r\n      console.log(state);\r\n      console.log(sortedChatRooms);\r\n\r\n      // Mark chatmessage as read if the user has the chatroom open (without having to click the chatroom )\r\n      sortedChatRooms.map(room => {\r\n        if (room._id === state.activeChatRoom._id) {\r\n          console.log('👻👻');\r\n          room.chatMessages.map(message => {\r\n            if (message.read === false) {\r\n              console.log(message);\r\n              message.read = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        // loading: false,\r\n        lastMessages: lastMessages,\r\n        // chatRooms: action.payload,\r\n        chatRooms: sortedChatRooms, // initial sort on page load/refresh. rerender sorting happens in SET_LAST_CHAT_MESSAGE\r\n      };\r\n    case SET_ACTIVE_CHATROOM:\r\n      // console.log(action.payload);\r\n      // console.log(state);\r\n\r\n      // set chatroom message as read\r\n      let rooms = state.chatRooms?.filter(room => {\r\n        if (action.payload._id === room._id) {\r\n          room.chatMessages?.filter(message => {\r\n            if (message.read === false) {\r\n              message.read = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      console.log(rooms);\r\n\r\n      return {\r\n        ...state,\r\n        activeChatRoom: action.payload,\r\n        chatMessages: action.payload.chatMessages.reverse(),\r\n      };\r\n    case CREATE_CHAT_ROOM: {\r\n      const newChatRooms = [...state.chatRooms];\r\n      console.log(newChatRooms);\r\n      console.log(action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        chatRooms: [...newChatRooms, action.payload],\r\n      };\r\n    }\r\n    case SET_NO_ACTIVE_CHATROOM: {\r\n      return {\r\n        ...state,\r\n        activeChatRoom: [],\r\n      };\r\n    }\r\n    case TOGGLE_CHAT: {\r\n      return {\r\n        ...state,\r\n        toggleFriendList: 'chats',\r\n      };\r\n    }\r\n    case TOGGLE_CONTACTS: {\r\n      return {\r\n        ...state,\r\n        toggleFriendList: 'contacts',\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\socketReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Login.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\userReducer.js",["149"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\AuthRoute.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Spinner.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Chat.js",["150"],"// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Components\r\nimport ChatFriendsList from './ChatFriendsList';\r\n\r\n// Helper functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport ChatMessageArea from './ChatMessageArea';\r\nimport ChatHeader from './ChatHeader';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    // height: '80vh',\r\n  },\r\n  headBG: {\r\n    backgroundColor: '#e0e0e0',\r\n  },\r\n  borderRight500: {\r\n    borderRight: '1px solid #e0e0e0',\r\n  },\r\n  messageArea: {\r\n    height: '60vh',\r\n    overflowY: 'auto',\r\n  },\r\n});\r\n\r\nconst Chat = props => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Grid container></Grid>\r\n      <Grid container component={Paper} className={classes.chatSection}>\r\n        <Grid item xs={3} className={classes.borderRight500}>\r\n          <List>\r\n            <ListItem button key={props.user._id}>\r\n              <ListItemIcon>\r\n                <Avatar alt={props.user.username.toUpperCase()} src={props.user.avatar} />\r\n              </ListItemIcon>\r\n              <ListItemText primary={firstCharUpperCase(props.user.username)}></ListItemText>\r\n            </ListItem>\r\n          </List>\r\n          <Divider />\r\n          <Grid item xs={12} style={{ padding: '10px' }}>\r\n            <TextField id='outlined-basic-email' label='Search' variant='outlined' fullWidth />\r\n          </Grid>\r\n          <Divider />\r\n\r\n          {/* Friend list */}\r\n          <ChatFriendsList />\r\n\r\n          {/*  */}\r\n        </Grid>\r\n        <Grid item xs={9}>\r\n          {/* Header */}\r\n          <ChatHeader />\r\n\r\n          {/* Chat Message Area */}\r\n          <ChatMessageArea classes={classes} />\r\n\r\n          {/*  */}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatFriendsList.js",["151","152","153","154","155","156","157"],"import { useEffect } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux actions\r\nimport { getAllUsers } from '../redux/actions/userActions';\r\nimport {\r\n  getSingleChatRoom,\r\n  createChatRoom,\r\n  markMessagesRead,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\n// Types\r\nimport { TOGGLE_CHAT, TOGGLE_CONTACTS, SET_NO_ACTIVE_CHATROOM } from '../redux/types';\r\n\r\n// Helper functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\n// MUI\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n// online badge icon\r\nconst StyledBadge = withStyles(theme => ({\r\n  badge: {\r\n    backgroundColor: '#44b700',\r\n    color: '#44b700',\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    '&::after': {\r\n      position: 'absolute',\r\n      width: '100%',\r\n      height: '100%',\r\n      borderRadius: '50%',\r\n      animation: '$ripple 1.2s infinite ease-in-out',\r\n      border: '1px solid currentColor',\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  '@keyframes ripple': {\r\n    '0%': {\r\n      transform: 'scale(.8)',\r\n      opacity: 1,\r\n    },\r\n    '100%': {\r\n      transform: 'scale(2.4)',\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nconst ChatFriendsList = props => {\r\n  // authroute calls getsAllUserRooms, which queries the chatrooms with {req.user._id} where the current logged in user is a member of.\r\n  // We add the chatrooms to the redux state, only chatrooms that have messages are rendered to CHATS\r\n  // we render the chatrooms, with the name of the member that is not the currentUser, sorted by the last created or received message on top.\r\n  // onCLick => getChatMessages from that room with the room._id + we socket.join('clickedRoom') server side, and leave all other rooms. (SERVER SIDE: NO LONGER TRUE)\r\n  // in socketManager we query the chatRooms where the user is a member, we loop through the rooms and socket.join them all.\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    props.getAllUsers();\r\n  }, []);\r\n\r\n  const { toggleFriendList } = props;\r\n\r\n  // check if there is a chatroom with the clicked on contact. create one if there is not.\r\n  const checkIfContactHasChatRoom = clickedContact => {\r\n    let chatroom;\r\n    props.chatRooms.map(room => {\r\n      room.members.map(member => {\r\n        if (clickedContact._id === member._id && room.members.length <= 2) {\r\n          chatroom = room;\r\n        }\r\n      });\r\n    });\r\n    console.log(chatroom);\r\n\r\n    // If there is a chatroom, set it as the activeChatRoom\r\n    if (chatroom) {\r\n      props.getSingleChatRoom(chatroom._id);\r\n\r\n      // If the chatroom contains chatMessages, render 'chats'. If the chatroom does not contain chatMessages, stay in 'contacts'.\r\n      chatroom.chatMessages.length > 0 && dispatch({ type: TOGGLE_CHAT });\r\n    } else {\r\n      // There is no chatRoom, stay in 'contacts'\r\n      dispatch({ type: TOGGLE_CONTACTS });\r\n      console.log('no chatroom');\r\n\r\n      // chatmessages: [] at chatroomModel?\r\n      // If there is no chatroom found, create a new chatroom.\r\n      // When the chatRoom is created, send it: socket.emit(CREATED_CHAT_MESSAGE, res.data.doc) to the server.\r\n      // dispatch SET_ACTIVE_CHATROOM which updates the props.activeChatRoom of the current user to the newly created chatroom\r\n      // the server socket.joins(newChatRoom._id) with the current socket.\r\n      // Server emits EMIT_CREATED_CHATROOM to chatMessageArea\r\n      // dispatch CREATE_CHAT_ROOM which updates the props.chatrooms of the chatRoomsMembers, updating the state. can't create 2 rooms ✅\r\n      // socket.emit(MEMBERS_JOIN_CHAT_ROOMS, newCreatedChatRoomId) to the server, so all connected members join the new chat room.\r\n      // TODO: Notification on unread messages\r\n      // TODO: set an expiry time on the chatRoom if no messages are sent within one hour/day?\r\n      // TODO: process nog een x doorlopen, misschien kan er wel een emit of dispatch tussen uit. bijvoorbeeld na onchange, als we toch emitten naar iedereen, en dan pas de members filteren.\r\n      props.createChatRoom(props.socket, clickedContact._id, props.user._id);\r\n    }\r\n  };\r\n\r\n  const countTotalUnreadMessages = props.chatRooms.map(room => {\r\n    return room.chatMessages.filter(message => {\r\n      return message.read === false && message.userId !== props.user._id;\r\n    }).length;\r\n  });\r\n\r\n  let totalUnreadMessages;\r\n  if (countTotalUnreadMessages[0]) {\r\n    totalUnreadMessages = countTotalUnreadMessages.reduce((a, b) => a + b);\r\n  }\r\n  console.log(totalUnreadMessages);\r\n\r\n  return (\r\n    <List>\r\n      <Grid container justify='space-between'>\r\n        <Grid item xs={6} style={{ borderRight: '1px solid lightgrey' }}>\r\n          <ListItem\r\n            button\r\n            onClick={e => {\r\n              dispatch({ type: TOGGLE_CONTACTS });\r\n              dispatch({ type: SET_NO_ACTIVE_CHATROOM });\r\n              console.log(toggleFriendList);\r\n            }}>\r\n            <ListItemText style={{ textAlign: 'center' }}>\r\n              <Tooltip title='Contacten' placement='top-start' arrow interactive>\r\n                {/* Contacts */}\r\n                {props.theme === 'dark' ? <PeopleAltIcon /> : <PeopleAltIcon color='primary' />}\r\n              </Tooltip>\r\n            </ListItemText>\r\n          </ListItem>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <ListItem\r\n            style={{ justifyContent: 'center' }}\r\n            button\r\n            onClick={e => {\r\n              dispatch({ type: TOGGLE_CHAT });\r\n              dispatch({ type: SET_NO_ACTIVE_CHATROOM });\r\n              console.log(toggleFriendList);\r\n            }}>\r\n            {toggleFriendList === 'contacts' && totalUnreadMessages > 0 ? (\r\n              <Badge badgeContent={totalUnreadMessages} max={9} color='secondary'>\r\n                <ListItemText style={{ textAlign: 'center' }}>\r\n                  <Tooltip\r\n                    title={\r\n                      totalUnreadMessages > 1\r\n                        ? `${totalUnreadMessages} nieuwe berichten`\r\n                        : `${totalUnreadMessages} nieuw bericht`\r\n                    }\r\n                    placement='top-start'\r\n                    arrow\r\n                    interactive>\r\n                    {/* Chats */}\r\n                    {props.theme === 'dark' ? <MessageIcon /> : <MessageIcon color='primary' />}\r\n                  </Tooltip>\r\n                </ListItemText>\r\n              </Badge>\r\n            ) : (\r\n              <ListItemText style={{ textAlign: 'center' }}>\r\n                <Tooltip title='Berichten' placement='top-start' arrow interactive>\r\n                  {/* Chats */}\r\n                  {props.theme === 'dark' ? <MessageIcon /> : <MessageIcon color='primary' />}\r\n                </Tooltip>\r\n              </ListItemText>\r\n            )}\r\n          </ListItem>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Render chats with messages */}\r\n      {props.chatRooms && toggleFriendList === 'chats'\r\n        ? props.chatRooms.map(room => {\r\n            // Render ONLINE CHAT users: sorted: chat with last received message on top\r\n            return (\r\n              room.chatMessages.length > 0 &&\r\n              room.members.map(member => {\r\n                if (\r\n                  Object.values(props.connectedUsers).includes(member._id) &&\r\n                  member.username !== props.user.username\r\n                ) {\r\n                  return (\r\n                    <ListItem\r\n                      button\r\n                      key={room._id}\r\n                      onClick={e => {\r\n                        console.log('click');\r\n                        console.log(`Room Id: ${room._id}`);\r\n                        props.getSingleChatRoom(room._id);\r\n\r\n                        let memberId = room.members.filter(member => member._id !== props.user._id);\r\n\r\n                        props.markMessagesRead(room._id, memberId);\r\n\r\n                        // props.socket.emit('roomId', room._id);\r\n                      }}>\r\n                      <ListItemIcon>\r\n                        <StyledBadge\r\n                          overlap='circle'\r\n                          anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right',\r\n                          }}\r\n                          variant='dot'>\r\n                          <Avatar alt={member.username.toUpperCase()} src={member.avatar} />\r\n                        </StyledBadge>\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={firstCharUpperCase(member.username)}></ListItemText>\r\n                      <Badge\r\n                        badgeContent={\r\n                          room._id !== props.activeChatRoom._id\r\n                            ? room.chatMessages.filter(message => {\r\n                                return (\r\n                                  message.username !== props.user.username && message.read === false\r\n                                );\r\n                              }).length\r\n                            : 0\r\n                        }\r\n                        color='secondary'\r\n                        max={9}>\r\n                        <ListItemText\r\n                          secondary={props.lastMessages.map(lastMessage => {\r\n                            if (lastMessage && lastMessage.chatRoomId === room._id) {\r\n                              return lastMessage.body;\r\n                            }\r\n                          })}\r\n                          align='right'></ListItemText>\r\n                      </Badge>\r\n                    </ListItem>\r\n                  );\r\n                  // Render OFFLINE CHAT users\r\n                } else if (member.username !== props.user.username) {\r\n                  return (\r\n                    <ListItem\r\n                      button\r\n                      key={room._id}\r\n                      onClick={e => {\r\n                        console.log('click');\r\n                        console.log(`Room Id: ${room._id}`);\r\n                        props.getSingleChatRoom(room._id);\r\n\r\n                        let memberId = room.members.filter(member => member._id !== props.user._id);\r\n\r\n                        props.markMessagesRead(room._id, memberId);\r\n                        // props.socket.emit('roomId', room._id);\r\n                      }}>\r\n                      <ListItemIcon>\r\n                        <Avatar alt={member.username.toUpperCase()} src={member.avatar} />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary={firstCharUpperCase(member.username)}>\r\n                        {firstCharUpperCase(member.username)}\r\n                      </ListItemText>\r\n\r\n                      <Badge\r\n                        badgeContent={\r\n                          room._id !== props.activeChatRoom._id\r\n                            ? room.chatMessages.filter(message => {\r\n                                return (\r\n                                  message.username !== props.user.username && message.read === false\r\n                                );\r\n                              }).length\r\n                            : 0\r\n                        }\r\n                        color='secondary'\r\n                        max={9}>\r\n                        <ListItemText\r\n                          secondary={props.lastMessages.map(lastMessage => {\r\n                            if (lastMessage && lastMessage.chatRoomId === room._id) {\r\n                              return lastMessage.body;\r\n                            }\r\n                          })}\r\n                          align='right'\r\n                        />\r\n                      </Badge>\r\n                    </ListItem>\r\n                  );\r\n                }\r\n              })\r\n            );\r\n          })\r\n        : // Render ONLINE CONTACTS: sorted online users first\r\n          props.users &&\r\n          toggleFriendList === 'contacts' &&\r\n          props.users.map(user => {\r\n            if (\r\n              Object.values(props.connectedUsers).includes(user._id) &&\r\n              user.username !== props.user.username\r\n            ) {\r\n              return (\r\n                <ListItem\r\n                  button\r\n                  key={user._id}\r\n                  onClick={e => {\r\n                    console.log('clicked ONLINE contact');\r\n                    // console.log(props.chatRooms);\r\n                    // console.log(user._id);\r\n                    console.log(user);\r\n                    checkIfContactHasChatRoom(user);\r\n\r\n                    // console.log(`Room Id: ${room._id}`);\r\n                    // props.getSingleChatRoom(room._id);\r\n                    // props.socket.emit('roomId', room._id);\r\n                  }}>\r\n                  <ListItemIcon>\r\n                    <StyledBadge\r\n                      overlap='circle'\r\n                      anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                      }}\r\n                      variant='dot'>\r\n                      <Avatar alt={user.username.toUpperCase()} src={user.avatar} />\r\n                    </StyledBadge>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={firstCharUpperCase(user.username)}>\r\n                    {firstCharUpperCase(user.username)}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              );\r\n            }\r\n            // Render OFFLINE CONTACTS\r\n            else if (user.username !== props.user.username) {\r\n              return (\r\n                <ListItem\r\n                  button\r\n                  key={user._id}\r\n                  onClick={e => {\r\n                    console.log('clicked OFFLINE contact');\r\n                    // console.log(props.chatRooms);\r\n                    // console.log(user._id);\r\n                    console.log(user);\r\n\r\n                    checkIfContactHasChatRoom(user);\r\n                  }}>\r\n                  <ListItemIcon>\r\n                    <Avatar alt={user.username.toUpperCase()} src={user.avatar} />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={firstCharUpperCase(user.username)}>\r\n                    {firstCharUpperCase(user.username)}\r\n                  </ListItemText>\r\n                  <ListItemText secondary='Offline' align='right'></ListItemText>\r\n                </ListItem>\r\n              );\r\n            }\r\n          })}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    user: state.user.user,\r\n    toggleFriendList: state.chat.toggleFriendList,\r\n    chatRooms: state.chat.chatRooms,\r\n    lastMessages: state.chat.lastMessages,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n    connectedUsers: state.user.connectedUsers,\r\n    users: state.user.users,\r\n    theme: state.theme.theme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleChatRoom,\r\n  getAllUsers,\r\n  createChatRoom,\r\n  markMessagesRead,\r\n})(ChatFriendsList);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatMessageArea.js",["158","159","160"],"// React\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n// Redux Actions\r\nimport {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n} from '../redux/actions/chatMessageActions';\r\n\r\nimport {\r\n  OUTPUT_CHAT_MESSAGE,\r\n  DELETED_CHAT_MESSAGE,\r\n  CREATE_CHAT_ROOM,\r\n  EMIT_CREATED_CHAT_ROOM,\r\n  MEMBERS_JOIN_NEW_CHAT_ROOM,\r\n  TOGGLE_CHAT,\r\n} from '../redux/types';\r\n\r\nimport moment from 'moment';\r\n\r\n// MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst ChatMessageArea = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    user,\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n    getAllUserChatRooms,\r\n  } = props;\r\n\r\n  //   On changes to the chatMessages in the state\r\n  useEffect(() => {\r\n    // Dont stack multiple callbacks, just execute once\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$OUTPUT_CHAT_MESSAGE']) {\r\n      socket._callbacks['$OUTPUT_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$EMIT_CREATED_CHAT_ROOM']) {\r\n      socket._callbacks['$EMIT_CREATED_CHAT_ROOM'].length = 0;\r\n    }\r\n\r\n    if (socket._callbacks !== undefined && socket._callbacks['$DELETED_CHAT_MESSAGE']) {\r\n      socket._callbacks['$DELETED_CHAT_MESSAGE'].length = 0;\r\n    }\r\n\r\n    // if (socket._callbacks !== undefined) {\r\n    //   Object.keys(socket._callbacks).map(callback => {\r\n    //     if (socket._callbacks[callback]) {\r\n    //       socket._callbacks[callback].length = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    // Listen to incoming chatMessages from the backend\r\n    socket.on(OUTPUT_CHAT_MESSAGE, messageFromBackend => {\r\n      // Dispatch messageFromBackend to the chatMessageReducer, to update the state/props to rerender\r\n      // props.createChatMessage(messageFromBackend);\r\n      console.log('message from backend:');\r\n      console.log(messageFromBackend);\r\n\r\n      // updates the lastChatMessage at the friendsList for both the sender and the receiver of the message.\r\n      emitLastChatMessage(messageFromBackend);\r\n\r\n      // Reorder friendList to show latest conversation on top (SENDER)\r\n      getAllUserChatRooms();\r\n\r\n      if (user._id === messageFromBackend.userId) dispatch({ type: TOGGLE_CHAT });\r\n\r\n      // Dispatch from here, so that the redux state is updated for all clients in the room.\r\n      if (messageFromBackend.chatRoomId === props.activeChatRoom._id) {\r\n        console.log('only runs when activeChatRoom === messageFromBackend.chatRoomId');\r\n        emitCreateChatMessageFromServerToAllClients(messageFromBackend);\r\n      }\r\n    });\r\n\r\n    // Listen to incoming ID's from deleted chatMessages from the backend / db\r\n    socket.on(DELETED_CHAT_MESSAGE, messageIdFromBackEnd => {\r\n      emitDeleteChatMessageFromServerToAllClients(messageIdFromBackEnd);\r\n    });\r\n\r\n    // When a new chatRoom is created, update the props.chatRooms for all members.\r\n    socket.on(EMIT_CREATED_CHAT_ROOM, createdChatRoom => {\r\n      console.log(createdChatRoom);\r\n\r\n      // if the the current logged in user is a member of the new created chatroom, dispatch add the chatroom to the state. emit the chatroom to the server from all members, so they can all socket.join(theNewChatRoom) serverside\r\n      createdChatRoom.members.map(member => {\r\n        if (member._id === user._id) {\r\n          console.log(member);\r\n          dispatch({ type: CREATE_CHAT_ROOM, payload: createdChatRoom });\r\n          socket.emit(MEMBERS_JOIN_NEW_CHAT_ROOM, createdChatRoom);\r\n        }\r\n      });\r\n    });\r\n  }, [\r\n    socket,\r\n    activeChatRoom,\r\n    emitCreateChatMessageFromServerToAllClients,\r\n    emitLastChatMessage,\r\n    emitDeleteChatMessageFromServerToAllClients,\r\n  ]);\r\n\r\n  // Scroll to bottom on new chatMessage\r\n  const chatEnd = useRef(null);\r\n  useEffect(() => {\r\n    chatEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        {props.activeChatRoom.chatMessages ? (\r\n          props.chatMessages.map(message => (\r\n            <ListItem key={message._id}>\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  {/* username */}\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={message.username}></ListItemText>\r\n\r\n                  {/* chat message body */}\r\n                  <ListItemText align={props.user._id === message.userId ? 'right' : 'left'}>\r\n                    <Chip\r\n                      label={message.body}\r\n                      align={props.user._id === message.userId ? 'right' : 'left'}\r\n                      color='primary'\r\n                    />\r\n                  </ListItemText>\r\n                </Grid>\r\n\r\n                {/* timestamp */}\r\n                <Grid item xs={12}>\r\n                  <ListItemText\r\n                    align={props.user._id === message.userId ? 'right' : 'left'}\r\n                    secondary={moment(message.createdAt).fromNow()}></ListItemText>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            Selecteer een gesprek\r\n          </div>\r\n        )}\r\n\r\n        <div ref={chatEnd} />\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    socket: state.socket.socket,\r\n    chatMessages: state.chat.chatMessages,\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createChatMessage,\r\n  deleteChatMessage,\r\n  emitCreateChatMessageFromServerToAllClients,\r\n  emitLastChatMessage,\r\n  emitDeleteChatMessageFromServerToAllClients,\r\n  getAllUserChatRooms,\r\n})(ChatMessageArea);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\BigChat.js",["161","162","163"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Truncate.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\ToggleTheme.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\Mui.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\redux\\reducers\\themeReducer.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\helperFunctions.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatInput.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatUserData.js",["164","165"],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\Components\\ChatHeader.js",["166","167","168","169"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n// Helper Functions\r\nimport { firstCharUpperCase } from '../util/helperFunctions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingTop: 20,\r\n    paddingLeft: 20,\r\n  },\r\n  avatar: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n  members: {\r\n    fontWeight: 'bold',\r\n    marginLeft: 20,\r\n    marginRight: 10,\r\n  },\r\n  text: {\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ChatHeader = props => {\r\n  const classes = useStyles();\r\n\r\n  const { user, activeChatRoom } = props;\r\n\r\n  const contact = activeChatRoom.members?.filter(member =>\r\n    user._id !== member._id ? member : null,\r\n  );\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {contact && (\r\n        <>\r\n          <Avatar\r\n            className={classes.avatar}\r\n            alt={contact && contact[0]?.username.toUpperCase()}\r\n            src={contact && contact[0]?.avatar}\r\n          />\r\n          <Typography variant='caption' className={classes.text}>\r\n            <Typography variant='caption' className={classes.members}>\r\n              Members:\r\n            </Typography>\r\n            {activeChatRoom.members.map(\r\n              member =>\r\n                `${firstCharUpperCase(member.username)} ${\r\n                  member !== activeChatRoom.members[activeChatRoom.members.length - 1] ? '&' : ''\r\n                } `,\r\n            )}\r\n          </Typography>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n    activeChatRoom: state.chat.activeChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChatHeader);\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\darkTheme.js",["170"],"import teal from '@material-ui/core/colors/teal';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\nexport default {\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: teal[700],\r\n    },\r\n    secondary: {\r\n      main: purple[500],\r\n    },\r\n  },\r\n};\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\lightTheme.js",["171"],"import teal from '@material-ui/core/colors/teal';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\nexport default {\r\n  palette: {\r\n    type: 'light',\r\n    primary: {\r\n      main: teal[700],\r\n    },\r\n    secondary: {\r\n      main: purple[500],\r\n    },\r\n  },\r\n};\r\n","C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\UploadAvatar.js",[],"C:\\Users\\gebruiker\\React\\mern\\frontend\\src\\util\\Upload.js",["172","173"],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":15,"column":8,"nodeType":"180","messageId":"181","endLine":15,"endColumn":16},{"ruleId":"178","severity":1,"message":"182","line":16,"column":8,"nodeType":"180","messageId":"181","endLine":16,"endColumn":12},{"ruleId":"178","severity":1,"message":"183","line":17,"column":8,"nodeType":"180","messageId":"181","endLine":17,"endColumn":16},{"ruleId":"184","severity":1,"message":"185","line":46,"column":40,"nodeType":"186","messageId":"187","endLine":46,"endColumn":42},{"ruleId":"184","severity":1,"message":"188","line":92,"column":11,"nodeType":"189","messageId":"190","endLine":92,"endColumn":18},{"ruleId":"184","severity":1,"message":"191","line":100,"column":32,"nodeType":"186","messageId":"192","endLine":100,"endColumn":34},{"ruleId":"184","severity":1,"message":"191","line":103,"column":41,"nodeType":"186","messageId":"192","endLine":103,"endColumn":43},{"ruleId":"184","severity":1,"message":"193","line":124,"column":48,"nodeType":"186","messageId":"192","endLine":124,"endColumn":50},{"ruleId":"184","severity":1,"message":"193","line":126,"column":45,"nodeType":"186","messageId":"192","endLine":126,"endColumn":47},{"ruleId":"184","severity":1,"message":"191","line":53,"column":36,"nodeType":"186","messageId":"192","endLine":53,"endColumn":38},{"ruleId":"178","severity":1,"message":"194","line":16,"column":8,"nodeType":"180","messageId":"181","endLine":16,"endColumn":18},{"ruleId":"195","severity":1,"message":"196","line":72,"column":6,"nodeType":"197","endLine":72,"endColumn":8,"suggestions":"198"},{"ruleId":"184","severity":1,"message":"191","line":79,"column":30,"nodeType":"186","messageId":"192","endLine":79,"endColumn":32},{"ruleId":"184","severity":1,"message":"191","line":80,"column":31,"nodeType":"186","messageId":"192","endLine":80,"endColumn":33},{"ruleId":"184","severity":1,"message":"185","line":189,"column":39,"nodeType":"186","messageId":"187","endLine":189,"endColumn":41},{"ruleId":"184","severity":1,"message":"185","line":234,"column":73,"nodeType":"186","messageId":"187","endLine":234,"endColumn":75},{"ruleId":"184","severity":1,"message":"185","line":279,"column":73,"nodeType":"186","messageId":"187","endLine":279,"endColumn":75},{"ruleId":"184","severity":1,"message":"185","line":296,"column":32,"nodeType":"186","messageId":"187","endLine":296,"endColumn":34},{"ruleId":"178","severity":1,"message":"199","line":2,"column":21,"nodeType":"180","messageId":"181","endLine":2,"endColumn":29},{"ruleId":"184","severity":1,"message":"191","line":104,"column":42,"nodeType":"186","messageId":"192","endLine":104,"endColumn":44},{"ruleId":"195","severity":1,"message":"200","line":112,"column":6,"nodeType":"197","endLine":118,"endColumn":4,"suggestions":"201"},{"ruleId":"178","severity":1,"message":"202","line":21,"column":8,"nodeType":"180","messageId":"181","endLine":21,"endColumn":23},{"ruleId":"195","severity":1,"message":"203","line":99,"column":6,"nodeType":"197","endLine":104,"endColumn":4,"suggestions":"204"},{"ruleId":"184","severity":1,"message":"185","line":158,"column":48,"nodeType":"186","messageId":"187","endLine":158,"endColumn":50},{"ruleId":"178","severity":1,"message":"205","line":11,"column":8,"nodeType":"180","messageId":"181","endLine":11,"endColumn":15},{"ruleId":"178","severity":1,"message":"206","line":27,"column":5,"nodeType":"180","messageId":"181","endLine":27,"endColumn":10},{"ruleId":"178","severity":1,"message":"207","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"178","severity":1,"message":"208","line":3,"column":8,"nodeType":"180","messageId":"181","endLine":3,"endColumn":15},{"ruleId":"178","severity":1,"message":"209","line":4,"column":8,"nodeType":"180","messageId":"181","endLine":4,"endColumn":12},{"ruleId":"178","severity":1,"message":"210","line":7,"column":8,"nodeType":"180","messageId":"181","endLine":7,"endColumn":15},{"ruleId":"211","severity":1,"message":"212","line":4,"column":1,"nodeType":"213","endLine":14,"endColumn":3},{"ruleId":"211","severity":1,"message":"212","line":4,"column":1,"nodeType":"213","endLine":14,"endColumn":3},{"ruleId":"214","severity":2,"message":"215","line":21,"column":25,"nodeType":"180","messageId":"216","endLine":21,"endColumn":30},{"ruleId":"217","severity":2,"message":"218","line":21,"column":25,"nodeType":"219","endLine":21,"endColumn":39},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"no-unused-vars","'ChatPage' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'Truncate' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.sort() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","Array.prototype.map() expects a return value from arrow function.","expectedInside","Array.prototype.filter() expects a return value from arrow function.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["222"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getAllUserChatRooms', 'props.activeChatRoom._id', and 'user._id'. Either include them or remove the dependency array.",["223"],"'ChatFriendsList' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["224"],"'Tooltip' is defined but never used.","'color' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Grid' is defined but never used.","'Divider' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-undef","'React' is not defined.","undef","react-hooks/rules-of-hooks","React Hook \"React.useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [props]",{"range":"231","text":"232"},"Update the dependencies array to be: [socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id]",{"range":"233","text":"234"},"Update the dependencies array to be: [props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]",{"range":"235","text":"236"},[2519,2521],"[props]",[4028,4194],"[socket, activeChatRoom, emitCreateChatMessageFromServerToAllClients, emitLastChatMessage, emitDeleteChatMessageFromServerToAllClients, getAllUserChatRooms, user._id, dispatch, props.activeChatRoom._id]",[2962,3108],"[props.activeChatRoom, socket, emitCreateChatMessageFromServerToAllClients, emitDeleteChatMessageFromServerToAllClients, props]"]